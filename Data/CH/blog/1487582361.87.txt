hdu 1881 毕业bg- DP题目描述：
 每年毕业的季节都会有大量毕业生发起狂欢，好朋友们相约吃散伙饭，网络上称为“bg”。参加不同团体的bg会有不同的感觉，我们可以用一个非负整数为每个bg定义一个“快乐度”。现给定一个bg列表，上面列出每个bg的快乐度、持续长度、bg发起人的离校时间，请你安排一系列bg的时间使得自己可以获得最大的快乐度。



 例如有4场bg：

 第1场快乐度为5，持续1小时，发起人必须在1小时后离开；

 第2场快乐度为10，持续2小时，发起人必须在3小时后离开；

 第3场快乐度为6，持续1小时，发起人必须在2小时后离开；

 第4场快乐度为3，持续1小时，发起人必须在1小时后离开。

 则获得最大快乐度的安排应该是：先开始第3场，获得快乐度6，在第1小时结束，发起人也来得及离开；再开始第2场，获得快乐度10，在第3小时结束，发起人正好来得及离开。此时已经无法再安排其他的bg，因为发起人都已经离开了学校。因此获得的最大快乐度为16。



 注意bg必须在发起人离开前结束，你不可以中途离开一场bg，也不可以中途加入一场bg。

又因为你的人缘太好，可能有多达30个团体bg你，所以你需要写个程序来解决这个时间安排的问题。




输入：
 测试输入包含若干测试用例。每个测试用例的第1行包含一个整数N (&lt;=30)，随后有N行，每行给出一场bg的信息：

 h l t

 其中 h 是快乐度，l是持续时间（小时），t是发起人离校时间。数据保证l不大于t,因为若发起人必须在t小时后离开，bg必须在主人离开前结束。



 当N为负数时输入结束。




输出：

   
 每个测试用例的输出占一行，输出最大快乐度。




样例输入：

   3
6 3 3
3 2 2
4 1 3
4
5 1 1
10 2 3
6 1 2
3 1 1
-1



样例输出：

   7
16


   #include &quot;iostream&quot;
#include &quot;stdio.h&quot;
#include &quot;math.h&quot;
#include &quot;vector&quot;
#include &quot;queue&quot;
#include &quot;memory.h&quot;
#include &quot;algorithm&quot;
#include &quot;string&quot;
using namespace std;
int m[31][1000];
struct BG
{
	int h,l,t;
} bg[31];

bool cmp(const BG a,const BG b)
{
	return a.t&lt;b.t;
}

int main()
{
	int n;
	while(cin&gt;&gt;n&amp;&amp;n&gt;=0)
	{
		int mmax=0;
		for(int t=1;t&lt;=n;++t)
		{    
			cin&gt;&gt;bg[t].h&gt;&gt;bg[t].l&gt;&gt;bg[t].t;
			if(bg[t].t&gt;mmax)
				mmax=bg[t].t;
		}

		sort(bg+1,bg+n+1,cmp);//按离校时间升序排列

		for(int i=0;i&lt;=n;++i)m[i][0]=m[0][i]=0;
		for(int i=1;i&lt;=n;++i)
		{
			for(int j=0;j&lt;=mmax;++j)
			{
				if(j&lt;=bg[i].t&amp;&amp;j-bg[i].l&gt;=0)
					m[i][j]=max(m[i-1][j],m[i-1][j-bg[i].l]+bg[i].h);
				else m[i][j]=m[i-1][j];
			}
		}
		int result=m[n][mmax];
		for(int j=mmax;j&gt;=0;--j)
			if(result&lt;m[n][j])result=m[n][j];
		cout&lt;&lt;result&lt;&lt;endl;
	}
	return 0;
}

   




   或者在中间更新也行，那m[n][mmax]就是最终结果了。


   #include &quot;iostream&quot;  
#include &quot;stdio.h&quot;  
#include &quot;math.h&quot;  
#include &quot;vector&quot;  
#include &quot;queue&quot;  
#include &quot;memory.h&quot;  
#include &quot;algorithm&quot;  
#include &quot;string&quot;  
using namespace std;  
int m[31][1000];  
struct BG  
{  
	int h,l,t;  
} bg[31];  

bool cmp(const BG a,const BG b)  
{  
	return a.t&lt;b.t;  
}  

int main()  
{  
	int n;  
	while(cin&gt;&gt;n&amp;&amp;n&gt;=0)  
	{  
		int mmax=0;  
		for(int t=1;t&lt;=n;++t)  
		{      
			cin&gt;&gt;bg[t].h&gt;&gt;bg[t].l&gt;&gt;bg[t].t;  
			if(bg[t].t&gt;mmax)  
				mmax=bg[t].t;  
		}  

		sort(bg+1,bg+n+1,cmp);//按离校时间升序排列  

		for(int i=0;i&lt;=n;++i)m[i][0]=m[0][i]=0;  
		for(int i=1;i&lt;=n;++i)  
		{  
			for(int j=1;j&lt;=mmax;++j)  
			{  
				if(j&lt;=bg[i].t&amp;&amp;j-bg[i].l&gt;=0)  
					m[i][j]=max(m[i-1][j],m[i-1][j-bg[i].l]+bg[i].h);  
				else m[i][j]=max(m[i-1][j],m[i][j-1]);  
			}  
		} 
// 		int i,j;
// 		for(j=0;j&lt;=mmax;j++)
// 		{
// 			printf(&quot;%d\t&quot;,j);
// 			for(i=1;i&lt;=n;i++)
// 			{
// 				printf(&quot;%d\t&quot;,m[i][j]);
// 			}
// 			cout&lt;&lt;endl;
// 		}
		cout&lt;&lt;m[n][mmax]&lt;&lt;endl;  
	}  
	return 0;  
}