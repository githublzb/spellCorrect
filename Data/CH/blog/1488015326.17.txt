log4j日志优化：使用BufferedIO和BufferSize而不是ImmediateFlush之前我们使用FileAppender的时候，我们配置是ImmediateFlush=true，一旦有新日志写入，立马将日志写入到磁盘的文件中。当日志很多，这种频繁操作文件显然性能很低下。


   package aty.log;

import org.apache.log4j.Logger;

import aty.log.service.A;

public class HelloLog4j {

	private static Logger logger = Logger.getLogger(HelloLog4j.class);

	public static void main(String[] args) {
		logger.error(&quot;log in main.&quot;);
		new A().run();
	}
}
   log4j.rootLogger=debug, file

log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.Threshold=info  
log4j.appender.file.ImmediateFlush=true
log4j.appender.file.append=false  
log4j.appender.file.File=c:/a.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss,SSS}]-[%t]-[%X{ip}]-[%l]-[%p] %m%n


   


   由于我们设置的ImmediateFlush是true，所以上面这段代码能够正常将日志写入a.log中。


   




   为了提高日志写入文件的性能，可以使用BufferedIO和BufferSize。下面的配置我们使用了IO缓存，缓冲区大小是8KB。


   log4j.rootLogger=debug, file

log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.Threshold=info  
log4j.appender.file.ImmediateFlush=false 
log4j.appender.file.BufferedIO=true
log4j.appender.file.BufferSize=8192 
log4j.appender.file.append=false  
log4j.appender.file.File=c:/a.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss,SSS}]-[%t]-[%X{ip}]-[%l]-[%p] %m%n

   


   



再次运行上面的HelloLog4j，可以发现：日志不能写入到文件中。这是因为：日志是停留在内存中的，虚拟机已经关闭，内存被释放了，log4j并没有将内存中的日志写入到文件中。怎么解决这个问题呢？
   package aty.log;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import aty.log.service.A;

public class HelloLog4j {

	private static Logger logger = Logger.getLogger(HelloLog4j.class);

	public static void main(String[] args) {
		logger.error(&quot;log in main.&quot;);
		new A().run();

		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				System.out.println(&quot;shutdown...&quot;);

				LogManager.shutdown();

				System.out.println(&quot;done...&quot;);
			}
		});

	}

}


   




   这里使用了JVM关闭的回调，类&#20284;地在tomcat等web容器中，也有类&#20284;的关闭事件。我们需要捕获关闭事件，然后调用LogManager.shutdown()即可。