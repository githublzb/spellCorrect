redis数据类型List的常用命令redis的文档写的还是比较详细的，中文版: http://doc.redisfans.com/ 英文版:http://redis.io/commands。这篇文章主要是自己亲自实践一下redis的基本操作，做个备忘，加深印象。





LPUSH key value [value ...]
将一个或多个&#20540; value 插入到列表 key 的表头。

如果有多个 value &#20540;，那么各个 value &#20540;按从左到右的顺序依次插入到表头： 比如说，对空列表 mylist 执行命令 LPUSH mylist a b c ，列表的&#20540;将是 c b a ，这等同于原子性地执行 LPUSH mylist a 、 LPUSH mylist b 和 LPUSH mylist c 三个命令。

如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。

当 key 存在但不是列表类型时，返回一个错误。


   



返回&#20540;：

执行 LPUSH 命令后，列表的长度。





   例子：


   


   # 加入单个元素
redis&gt; LPUSH languages python
(integer) 1

# 加入重复元素
redis&gt; LPUSH languages python
(integer) 2

redis&gt; LRANGE languages 0 -1     # 列表允许重复元素
1) &quot;python&quot;
2) &quot;python&quot;

# 加入多个元素
redis&gt; LPUSH mylist a b c
(integer) 3

redis&gt; LRANGE mylist 0 -1
1) &quot;c&quot;
2) &quot;b&quot;
3) &quot;a&quot;


   

LPUSHX key value
将&#20540; value 插入到列表 key 的表头，当且仅当 key 存在并且是一个列表。

和 LPUSH 命令相反，当 key 不存在时， LPUSHX 命令什么也不做。

   


   这里有一点需要注意：redis没有空的list，如果先添加一个元素，然后再删除这个元素，那么这个list也整个被删除了。




   



返回&#20540;：

执行 LPUSHX命令后，列表的长度。





   例子：


   


   redis&gt; LPUSH aty &quot;morning&quot;
(integer) 1
redis&gt; LREM aty 0 morning  
(integer) 1
redis&gt; exists aty #aty这个key不存在了
(integer) 0

# 对空列表执行 LPUSHX
redis&gt; LLEN greet  # greet 是一个空列表
(integer) 0

redis&gt; LPUSHX greet &quot;hello&quot;      # 尝试 LPUSHX，失败，因为列表为空
(integer) 0

# 对非空列表执行 LPUSHX
redis&gt; LPUSH greet &quot;hello&quot;# 先用 LPUSH 创建一个有一个元素的列表
(integer) 1

redis&gt; LPUSHX greet &quot;good morning&quot;      # 这次 LPUSHX 执行成功
(integer) 2

redis&gt; LRANGE greet 0 -1
1) &quot;good morning&quot;
2) &quot;hello&quot;


   


   

RPUSH key value [value ...]
将一个或多个&#20540; value 插入到列表 key 的表尾(最右边)。

如果有多个 value &#20540;，那么各个 value &#20540;按从左到右的顺序依次插入到表尾：比如对一个空列表 mylist 执行 RPUSH mylist a b c ，得出的结果列表为 a b c ，等同于执行命令 RPUSH mylist a 、 RPUSH mylist b 、 RPUSH mylist c 。

如果 key 不存在，一个空列表会被创建并执行 RPUSH 操作。

当 key 存在但不是列表类型时，返回一个错误。

   



返回&#20540;：

执行 RPUSH 操作后，表的长度。





   例子：


   


   # 添加单个元素
redis&gt; RPUSH languages c
(integer) 1

# 添加重复元素
redis&gt; RPUSH languages c
(integer) 2

redis&gt; LRANGE languages 0 -1 # 列表允许重复元素
1) &quot;c&quot;
2) &quot;c&quot;

# 添加多个元素
redis&gt; RPUSH mylist a b c
(integer) 3

redis&gt; LRANGE mylist 0 -1
1) &quot;a&quot;
2) &quot;b&quot;
3) &quot;c&quot;

   

RPUSHX key value
将&#20540; value 插入到列表 key 的表尾，当且仅当 key 存在并且是一个列表。

和 RPUSH 命令相反，当 key 不存在时， RPUSHX 命令什么也不做。

   


   



返回&#20540;：

RPUSHX 命令执行之后，表的长度。





   例子：


   


   # key不存在
redis&gt; LLEN greet
(integer) 0

redis&gt; RPUSHX greet &quot;hello&quot;     # 对不存在的 key 进行 RPUSHX，PUSH 失败。
(integer) 0


# key 存在且是一个非空列表
redis&gt; RPUSH greet &quot;hi&quot;  # 先用 RPUSH 插入一个元素
(integer) 1

redis&gt; RPUSHX greet &quot;hello&quot;     # greet 现在是一个列表类型，RPUSHX 操作成功。
(integer) 2

redis&gt; LRANGE greet 0 -1
1) &quot;hi&quot;
2) &quot;hello&quot;


   

LPOP key
移除并返回列表 key 的头元素。

   


   



返回&#20540;：

列表的头元素。

当 key 不存在时，返回 nil 。





   例子：


   redis&gt; LLEN course
(integer) 0

redis&gt; RPUSH course algorithm001
(integer) 1

redis&gt; RPUSH course c++101
(integer) 2

redis&gt; LPOP course  # 移除头元素
&quot;algorithm001&quot;

RPOP key
移除并返回列表 key 的尾元素。

   



返回&#20540;：

列表的尾元素。

当 key 不存在时，返回 nil 。





   例子：


   


   redis&gt; RPUSH mylist &quot;one&quot;
(integer) 1

redis&gt; RPUSH mylist &quot;two&quot;
(integer) 2

redis&gt; RPUSH mylist &quot;three&quot;
(integer) 3

redis&gt; RPOP mylist    # 返回被弹出的元素
&quot;three&quot;

redis&gt; LRANGE mylist 0 -1    # 列表剩下的元素
1) &quot;one&quot;
2) &quot;two&quot;


   

LLEN key
返回列表 key 的长度。

如果 key 不存在，则 key 被解释为一个空列表，返回 0 .

如果 key 不是列表类型，返回一个错误。

   


   



返回&#20540;：

列表 key 的长度。





   例子：


   # 空列表
redis&gt; LLEN job
(integer) 0

# 非空列表
redis&gt; LPUSH job &quot;cook food&quot;
(integer) 1

redis&gt; LPUSH job &quot;have lunch&quot;
(integer) 2

redis&gt; LLEN job
(integer) 2

LRANGE key start stop
返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定。

下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。



超出范围的下标&#20540;不会引起错误。

如果 start 下标比列表的最大下标 end ( LLEN list 减去 1 )还要大，那么 LRANGE 返回一个空列表。

如果 stop 下标比 end 下标还要大，Redis将 stop 的&#20540;设置为 end 。

   



返回&#20540;：

一个列表，包含指定区间内的元素。





   例子：


   


   redis&gt; RPUSH fp-language lisp
(integer) 1

redis&gt; LRANGE fp-language 0 0
1) &quot;lisp&quot;

redis&gt; RPUSH fp-language scheme
(integer) 2

redis&gt; LRANGE fp-language 0 1
1) &quot;lisp&quot;
2) &quot;scheme&quot;


   

LINDEX key index
返回列表 key 中，下标为 index 的元素。

下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。

如果 key 不是列表类型，返回一个错误。

   


   



返回&#20540;：

列表中下标为 index 的元素。

如果 index 参数的&#20540;不在列表的区间范围内(out of range)，返回 nil 。





   例子：


   redis&gt; LPUSH mylist &quot;World&quot;
(integer) 1

redis&gt; LPUSH mylist &quot;Hello&quot;
(integer) 2

redis&gt; LINDEX mylist 0
&quot;Hello&quot;

redis&gt; LINDEX mylist -1
&quot;World&quot;

redis&gt; LINDEX mylist 3 # index不在 mylist 的区间范围内
(nil)
LSET key index value
将列表 key 下标为 index 的元素的&#20540;设置为 value 。

当index参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。

   



返回&#20540;：

操作成功返回 ok ，否则返回错误信息。





   例子：


   


   # 对空列表(key 不存在)进行 LSET
redis&gt; EXISTS list
(integer) 0

redis&gt; LSET list 0 item
(error) ERR no such key

# 对非空列表进行 LSET
redis&gt; LPUSH job &quot;cook food&quot;
(integer) 1

redis&gt; LRANGE job 0 0
1) &quot;cook food&quot;

redis&gt; LSET job 0 &quot;play game&quot;
OK

redis&gt; LRANGE job  0 0
1) &quot;play game&quot;

# index 超出范围
redis&gt; LLEN list      # 列表长度为 1
(integer) 1

redis&gt; LSET list 3 &#39;out of range&#39;
(error) ERR index out of range




   

LINSERT key BEFORE|AFTER pivot value
将&#20540; value 插入到列表 key 当中，位于&#20540; pivot 之前或之后。

当 pivot 不存在于列表 key 时，不执行任何操作。

当 key 不存在时， key 被视为空列表，不执行任何操作。

如果 key 不是列表类型，返回一个错误。

   



返回&#20540;：

如果命令执行成功，返回插入操作完成之后，列表的长度。

如果没有找到 pivot ，返回 -1 。

如果 key 不存在或为空列表，返回 0 。





   例子：


   


   redis&gt; RPUSH mylist &quot;Hello&quot;
(integer) 1
redis&gt; RPUSH mylist &quot;World&quot;
(integer) 2

redis&gt; LINSERT mylist BEFORE &quot;World&quot; &quot;There&quot;
(integer) 3
redis&gt; LRANGE mylist 0 -1
1) &quot;Hello&quot;
2) &quot;There&quot;
3) &quot;World&quot;

# 对一个非空列表插入，查找一个不存在的 pivot
redis&gt; LINSERT mylist BEFORE &quot;go&quot; &quot;let&#39;s&quot;
(integer) -1 # 失败

# 对一个空列表执行 LINSERT 命令
redis&gt; EXISTS fake_list
(integer) 0

redis&gt; LINSERT fake_list BEFORE &quot;nono&quot; &quot;gogogog&quot;
(integer) 0   # 失败


   

LREM key count value
根据参数 count 的&#20540;，移除列表中与参数 value 相等的元素。

count 的&#20540;可以是以下几种：

count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。

count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对&#20540;。

count = 0 : 移除表中所有与 value 相等的&#20540;。

   


   



返回&#20540;：

被移除元素的数量。

因为不存在的 key 被视作空表(empty list)，所以当 key 不存在时， LREM 命令总是返回 0 。





   例子：


   # 先创建一个表，内容排列是
# morning hello morning hello morning
redis&gt; LPUSH greet &quot;morning&quot;
(integer) 1
redis&gt; LPUSH greet &quot;hello&quot;
(integer) 2
redis&gt; LPUSH greet &quot;morning&quot;
(integer) 3
redis&gt; LPUSH greet &quot;hello&quot;
(integer) 4
redis&gt; LPUSH greet &quot;morning&quot;
(integer) 5

redis&gt; LREM greet 2 morning     # 移除从表头到表尾，最先发现的两个 morning
(integer) 2# 两个元素被移除

redis&gt; LLEN greet # 还剩 3 个元素
(integer) 3

redis&gt; LRANGE greet 0 2
1) &quot;hello&quot;
2) &quot;hello&quot;
3) &quot;morning&quot;

redis&gt; LREM greet -1 morning    # 移除从表尾到表头，第一个 morning
(integer) 1

redis&gt; LLEN greet # 剩下两个元素
(integer) 2

redis&gt; LRANGE greet 0 1
1) &quot;hello&quot;
2) &quot;hello&quot;

redis&gt; LREM greet 0 hello      # 移除表中所有 hello
(integer) 2      # 两个 hello 被移除

redis&gt; LLEN greet
(integer) 0

LTRIM key start stop
对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。



举个例子，执行命令 LTRIM list 0 2 ，表示只保留列表 list 的前三个元素，其余元素全部删除。

下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。



当 key 不是列表类型时，返回一个错误。



超出范围的下标&#20540;不会引起错误。

如果 start 下标比列表的最大下标 end ( LLEN list 减去 1 )还要大，或者 start &gt; stop ， LTRIM 返回一个空列表(因为 LTRIM 已经将整个列表清空)。

如果 stop 下标比 end 下标还要大，Redis将 stop 的&#20540;设置为 end 。

   



返回&#20540;：

命令执行成功时，返回 ok 。





   例子：


   


   # 情况 1： 常见情况， start 和 stop 都在列表的索引范围之内

redis&gt; LRANGE alpha 0 -1# alpha 是一个包含 5 个字符串的列表
1) &quot;h&quot;
2) &quot;e&quot;
3) &quot;l&quot;
4) &quot;l&quot;
5) &quot;o&quot;

redis&gt; LTRIM alpha 1 -1 # 删除 alpha 列表索引为 0 的元素
OK

redis&gt; LRANGE alpha 0 -1# &quot;h&quot; 被删除了
1) &quot;e&quot;
2) &quot;l&quot;
3) &quot;l&quot;
4) &quot;o&quot;


# 情况 2： stop 比列表的最大下标还要大


redis&gt; LTRIM alpha 1 10086     # 保留 alpha 列表索引 1 至索引 10086 上的元素
OK

redis&gt; LRANGE alpha 0 -1# 只有索引 0 上的元素 &quot;e&quot; 被删除了，其他元素还在
1) &quot;l&quot;
2) &quot;l&quot;
3) &quot;o&quot;


# 情况 3： start 和 stop 都比列表的最大下标要大，并且 start &lt; stop

redis&gt; LTRIM alpha 10086 123321
OK

redis&gt; LRANGE alpha 0 -1 # 列表被清空
(empty list or set)


# 情况 4： start 和 stop 都比列表的最大下标要大，并且 start &gt; stop

redis&gt; RPUSH new-alpha &quot;h&quot; &quot;e&quot; &quot;l&quot; &quot;l&quot; &quot;o&quot;     # 重新建立一个新列表
(integer) 5

redis&gt; LRANGE new-alpha 0 -1
1) &quot;h&quot;
2) &quot;e&quot;
3) &quot;l&quot;
4) &quot;l&quot;
5) &quot;o&quot;

redis&gt; LTRIM new-alpha 123321 10086    # 执行 LTRIM
OK

redis&gt; LRANGE new-alpha 0 -1    # 同样被清空
(empty list or set)


   

RPOPLPUSH source destination
命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：

 将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。

 将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。



举个例子，你有两个列表 source 和 destination ， source 列表有元素 a, b, c ， destination 列表有元素 x, y, z ，执行 RPOPLPUSH source destination 之后， source 列表包含元素 a, b ， destination 列表包含元素 c, x, y, z ，并且元素 c 会被返回给客户端。



如果 source 不存在，&#20540; nil 被返回，并且不执行其他动作。

如果 source 和 destination 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列表的旋转(rotation)操作。

   


   



返回&#20540;：

被弹出的元素。





   例子：


   # source 和 destination 不同
redis&gt; LRANGE alpha 0 -1  # 查看所有元素
1) &quot;a&quot;
2) &quot;b&quot;
3) &quot;c&quot;
4) &quot;d&quot;

redis&gt; RPOPLPUSH alpha reciver   # 执行一次 RPOPLPUSH 看看
&quot;d&quot;

redis&gt; LRANGE alpha 0 -1
1) &quot;a&quot;
2) &quot;b&quot;
3) &quot;c&quot;

redis&gt; LRANGE reciver 0 -1
1) &quot;d&quot;

redis&gt; RPOPLPUSH alpha reciver   # 再执行一次，证实 RPOP 和 LPUSH 的位置正确
&quot;c&quot;

redis&gt; LRANGE alpha 0 -1
1) &quot;a&quot;
2) &quot;b&quot;

redis&gt; LRANGE reciver 0 -1
1) &quot;c&quot;
2) &quot;d&quot;


# source 和 destination 相同
redis&gt; LRANGE number 0 -1
1) &quot;1&quot;
2) &quot;2&quot;
3) &quot;3&quot;
4) &quot;4&quot;

redis&gt; RPOPLPUSH number number
&quot;4&quot;

redis&gt; LRANGE number 0 -1    # 4 被旋转到了表头
1) &quot;4&quot;
2) &quot;1&quot;
3) &quot;2&quot;
4) &quot;3&quot;

redis&gt; RPOPLPUSH number number
&quot;3&quot;

redis&gt; LRANGE number 0 -1    # 这次是 3 被旋转到了表头
1) &quot;3&quot;
2) &quot;4&quot;
3) &quot;1&quot;
4) &quot;2&quot;

BLPOP key [key ...] timeout
BLPOP 是列表的阻塞式(blocking)弹出原语。它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止。当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。

   当 BLPOP 被调用时，如果给定 key 内至少有一个非空列表，那么弹出遇到的第一个非空列表的头元素，并和被弹出元素所属的列表的名字一起，组成结果返回给调用者。



当存在多个给定 key 时， BLPOP 按给定 key 参数排列的先后顺序，依次检查各个列表。假设现在有 job 、 command 和 request 三个列表，其中 job 不存在， command 和 request 都持有非空列表。




   



返回&#20540;：

如果列表为空，返回一个 nil 。

否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的&#20540;。





   例子：


   


   redis&gt; DEL job command request    # 确保key都被删除
(integer) 0

redis&gt; LPUSH command &quot;update system...&quot;  # 为command列表增加一个值
(integer) 1

redis&gt; LPUSH request &quot;visit page&quot; # 为request列表增加一个值
(integer) 1

redis&gt; BLPOP job command request 0# job 列表为空，被跳过，紧接着 command 列表的第一个元素被弹出。
1) &quot;command&quot; # 弹出元素所属的列表
2) &quot;update system...&quot;      # 弹出元素所属的值

如果所有给定 key 都不存在或包含空列表，那么 BLPOP 命令将阻塞连接，直到等待超时，或有另一个客户端对给定 key 的任意一个执行 LPUSH 或 RPUSH 命令为止。超时参数 timeout 接受一个以秒为单位的数字作为&#20540;。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。


   


   


   redis&gt; EXISTS job  # 确保两个 key 都不存在
(integer) 0
redis&gt; EXISTS command
(integer) 0

redis&gt; BLPOP job command 300     # 因为key一开始不存在，所以操作会被阻塞，直到另一客户端对 job 或者 command 列表进行 PUSH 操作。
1) &quot;job&quot;    # 这里被 push 的是 job
2) &quot;do my home work&quot;      # 被弹出的值
(26.26s)    # 等待的秒数

redis&gt; BLPOP job command 5# 等待超时的情况
(nil)
(5.66s)     # 等待的秒数


   


   

BRPOP key [key ...] timeout
BRPOP 是列表的阻塞式(blocking)弹出原语。它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止。当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的尾部元素。关于阻塞操作的更多信息，请查看 BLPOP 命令， BRPOP 除了弹出元素的位置和 BLPOP
 不同之外，其他表现一致。

   


   



返回&#20540;：

假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。

反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的&#20540;。





   例子：


   


   redis&gt; LLEN course
(integer) 0

redis&gt; RPUSH course algorithm001
(integer) 1

redis&gt; RPUSH course c++101
(integer) 2

redis&gt; BRPOP course 30
1) &quot;course&quot;      # 弹出元素的 key
2) &quot;c++101&quot;      # 弹出元素的值


   


   

BRPOPLPUSH source destination timeout
BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。

当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。

超时参数 timeout 接受一个以秒为单位的数字作为&#20540;。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。

   


   


   



返回&#20540;：

假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。

反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的&#20540;，第二个元素是等待时长。





   例子：


   


   # 非空列表
redis&gt; BRPOPLPUSH msg reciver 500
&quot;hello moto&quot;   # 弹出元素的值
(3.38s) # 等待时长

redis&gt; LLEN reciver
(integer) 1

redis&gt; LRANGE reciver 0 0
1) &quot;hello moto&quot;


# 空列表
redis&gt; BRPOPLPUSH msg reciver 1
(nil)
(1.34s)