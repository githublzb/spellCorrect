hdu 3069Arrest

   Time Limit: 2000/1000 MS (Java/Others)Memory Limit: 32768/32768 K (Java/Others)Total Submission(s): 194Accepted Submission(s): 80

Problem Description

Country ALPC has n cities, and the cities are connected by undirected roads. Furthermore, there is exactly one route between each pair of cities. Now some criminals break the prison and the police do not know where they are. And the criminals can stay in a city or move on the roads. The police office has made a decision to send policemen to arrest the breakers. If a police and a criminal at a same point at the same time the criminal is under arrest, no matter in a city or on a road. The police office wants to minimize the number of policemen to arrest all the criminals. Now the map of Country ALPC is given, please tell the police office the least number of policemen required.




   

Input

There are several test cases.The first line a integer n, the number of cities. Next n-1 lines each two integers a and b, there is a road between city a and city b.(1&lt;=n &lt;= 1000, 1 &lt;= a, b &lt;= n)




   

Output

For each case output the minimal number of policemen.




   

Sample Input



   3
1 2
2 3
16
1 2
1 3
1 4
5 6
5 7
10 8
8 11
9 12
9 13
14 1
14 15
15 16
15 8
9 16
14  5






   

Sample Output



   1
3






   

Source

2009 Multi-University Training Contest 17 - Host by NUDT 



设n为一个节点需要警察的数量；

若一个节点的子节点最大值n只有一个，则父节点的n=它孩子的最大值n

else parent's n=最大值+1

#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;
#define N 1005
#define INF 1000000000
vector&lt;int&gt;g[N];
int n;
bool visited[N];
int dfs(int cur,int par)//cur-&gt;current; par-&gt;parent
{
	int i,j,temp=1,max=0,secmax=0;
	visited[cur]=true;
	for(i=0;i&lt;g[cur].size();i++)
	{
		if(!visited[g[cur][i]]&amp;&amp;g[cur][i]!=par)
		{
			temp=dfs(g[cur][i],cur);
			if(temp&gt;max)
				secmax=max,max=temp;
			else if(secmax&lt;temp)
				secmax=temp;
		}
	}
	max=max&gt;secmax+1?max:secmax+1;
	return max;
}
int Calans()
{
	memset(visited,false,sizeof(visited));
	int i,j;
	//search for every vertex
	int maxx=0,t;
	for(i=1;i&lt;=n;i++)
	{
		if(visited[i])
		{
			memset(visited,false,sizeof(visited));
			t=dfs(i,i);
			maxx=maxx&lt;t?maxx:t;
		}
		else
		{
			memset(visited,false,sizeof(visited));
			t=dfs(i,i);
			maxx=maxx&gt;t?maxx:t;
		}
	}
	return maxx;
}
int main()
{
	int i,j;
	while(scanf("%d",&amp;n)!=EOF)
	{
		for(i=1;i&lt;=n;i++)
			g[i].clear();
		int a,b;
		for(i=1;i&lt;n;i++)
		{
			scanf("%d%d",&amp;a,&amp;b);
			g[a].push_back(b);
			g[b].push_back(a);
		}
		int ans=Calans();
		printf("%d/n",ans);
	}
	return 0;
}