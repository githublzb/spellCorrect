帮Python找“对象”引言：你一定会感叹：Python还缺找对象？ 毕竟“一切皆对象”是人家Python的哲学理念。不过，Python
允许程序员以纯粹的面向过程的方式来使用它，所以人们有时会忽视它那颗“找对象”的心。其实无论是面向过程，还是函数式编程，都是特殊的对象模拟出的效果。
本文选自《从Python开始学编程》。让我们通过帮Python找对象，来学习Python这一语言。



类

   
　　说是要“找对象”，我们第一个看的却是个叫作“类”的语法结构。这里的类其实和我们日常生活中的“类”的概念差不多。日常生活中，我们把相近的东西归为一类，而且给这个类起一个名字。比如说，鸟类的共同属性是有羽毛，通过产卵生育后代。任何一只特别的鸟都是建立在鸟类的原型基础上的。
　　下面我们用Python 语言来记录上面的想法，描述鸟类：


   class Bird(object):
feather = True
reproduction = &quot;egg&quot;

   
　　在这里，我们用关键字class 来定义一个类。类的名字就是鸟（Bird）。括号里有一个关键词object，也就是“东西”的意思，即某一个个体。在计算机语言中，我们把个体称为对象。一个类别下，可以有多个个体。鸟类就可以包括邻居老王养的金丝雀、天边正飞过的那只乌鸦，以及家里养的一只小黄鸡。
　　冒号和缩进说明了属于这个类的代码。在隶属于这个类别的程序块中，我们定义了两个量，一个用于说明鸟类有羽毛（feather），另一个用于说明鸟类的繁殖方式（reproduction），这两个量称为类的属性（attribute）。我们定义鸟类的方法很粗糙，鸟类只不过是“有毛能产蛋”的东西。要是生物学家看到了大概会暗自摇头，但我们毕竟迈出了模拟世界的第一步。
　　我们除了用数据性的属性来分辨类别外，有时也会根据这类东西能做什么事情来区分。比如说，鸟会移动。这样，鸟就和房屋的类别就区分开了。这些动作会带来一定的结果，比如移动导致位置的变化。这样的一些“行为”属性称为方法（method）。Python 中，一般通过在类的内部定义函数来说明方法。


   class Bird(object):
feather = True
reproduction = &quot;egg&quot;
def chirp(self, sound):
print(sound)

   
　　我们给鸟类新增一个方法属性，就是表示鸟叫的方法chirp()。方法chirp()看起来很像一个函数。它的第一个参数是self，是为了在方法内部引用对象自身，我将在后面详细解释。需要强调的是，无论该参数是否用到，方法的第一个参数必须是用于指代对象自身的self。剩下的参数sound 是为了满足我们的需求设计的，它代表了鸟叫的内容。方法chirp()会把sound 打印出来。


对象

   
　　我们定义了类，但和函数定义一样，这还只是打造兵器的过程。为了使用这个利器，我们需要深入到对象的层面。通过调用类，我们可以创造出这个类下面的一个对象。比如说，我养了一只小鸡，叫summer。它是个对象，且属于鸟类。我们使用前面已经定义好的鸟类，产生这个对象：


   summer = Bird()


   
　　通过这一句创建对象，并说明summer 是属于鸟类的一个对象。现在，我们就可以使用鸟类中已经写好的代码了。作为对象的summer 将拥有鸟类的属性和方法。对属性的引用是通过对象.属性（object.attribute）的形式实现的。比如说：


   print(summer.reproduction) # 打印'egg'


   
　　用上面的方式，我们得到summer 所属类的繁殖方式。
　　此外，我们还可以调用方法，让summer 执行鸟类允许的动作。比如：


   summer.chirp(&quot;jijiji&quot;) # 打印'jijiji'


   
　　在调用方法时，我们只传递了一个参数，也就是字符串”jijiji”。这正是方法与函数有所区别的地方。尽管在定义类的方法时，我们必须加上这个self 参数，但self 只用能在类定义的内部，所以在调用方法时不需要对self 传入数据。通过调用chirp()方法，我的summer 就可以叫了。
　　到现在为止，描述对象的数据都存储于类的属性中。类属性描述了一个类的共性，比如鸟类都有羽毛。所有属于该类的对象会共享这些属性。比如说，summer 是鸟类的一个对象，因此summer 也有羽毛。当然，我们可以通过某个对象来引用某个类属性。
　　对于一个类下的全部个体来说，某些属性可能存在个体差异。比如说，我的summer 是黄色的，但并非所有的鸟儿都是黄色的。再比如说人这个类。性别是某个人的一个性质，不是所有的人类都是男，或者都是女。这个性质的&#20540;随着对象的不同而不同。李雷是人类的一个对象，性别是男。韩美美也是人类的一个对象，性别是女。
　　因此，为了完整描述个体，除了共性的类属性外，我们还需要用于说明个性的对象属性。在类中，我们可以通过self 来操作对象的属性。现在我们拓展Bird 类：


   class Bird(object):
def chirp(self, sound):
print(sound)
def set_color(self, color):
self.color = color


summer = Bird()
summer.set_color(&quot;yellow&quot;)
print(summer.color) # 打印'yellow'


   
　　在方法set_color()中，我们通过self 参数设定了对象的属性color。和类属性一样，我们能通过对象.属性的方式来操作对象属性。由于对象属性依赖于self，所以我们必须在某个方法内部才能操作类属性。因此，对象属性没办法像类属性一样，在类下方直接赋初&#20540;。
　　但Python 还是提供了初始化对象属性的办法。Python 定义了一系列特殊方法。特殊方法又被称为魔法方法（Magic Method）。特殊方法的方法名很特别，前后有两个下画线，比如init()、add()、dict()等。程序员可以在类定义中设定特殊方法。Python 会以特定的方式来处理各个特殊方法。对于类的init()方法，Python
 会在每次创建对象时自动调用。因此，我们可以在init()方法内部来初始化对象属性：


   class Bird(object):
def __init__(self, sound):
self.sound = sound
print(&quot;my sound is:&quot;, sound)
def chirp(self):
print(self.sound)


summer = Bird(&quot;ji&quot;)
summer.chirp() # 打印'ji'


   
　　在上面的类定义中，我们通过init()方法说明了这个类的初始化方式。每当对象建立时，比如创建summer 对象时，init()方法就会被调用。它会设定sound 这个对象属性。在后面的chirp()方法中，就可以通过self 调用这一对象属性。除了设定对象属性外，我们还可以在init()中加入其他指令。这些指令会在创建对象时执行。在调用类时，类的后面可以跟一个参数列表。这里放入的数据将传给init()的参数。通过init()方法，我们可以在创建对象时就初始化对象属性。
　　除了操作对象属性外，self 参数还有另外一个功能，就是能让我们在一个方法内部调用同一类的其他方法，比如：


   class Bird(object):
def chirp(self, sound):
print(sound)

def chirp_repeat(self, sound, n):
for i in range(n):
self.chirp(sound)

summer = Bird()
summer.chirp_repeat(&quot;ji&quot;, 10) # 重复打印'ji'10 次

   
　　在方法chirp_repeat()中，我们通过self 调用了类中的另一个方法chirp()。


   
　　Python的对象很多也很有趣，比如前面的文章《那些Python意想不到的对象》。若与这些对象深入交往，你会发现Python更多的魔力。更多内容可见《从Python开始学编程》一书。


   
　　本文选自《从Python开始学编程》，点此链接可在博文视点官网查看此书。
　　　　　　　　　　　　　　　　　　　　　


   


   　　想及时获得更多精彩文章，可在微信中搜索“博文视点”或者扫描下方二维码并关注。