最短路径数 Dijkstra+dfs寻找最短路径数

   

   标准dijkstra和spfa解法见《畅通工程续——Dijkstra模板》

   本篇多一项要求，求同样cost的最短路径数目。我们用dfs深搜，见代码注释。

   

   

   

   PAT : 1003

   

   As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.

   

   Input

   Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from C1 to C2.

   Output

   For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.
Sample Input
   5 6 0 2
1 2 1 5 3
0 1 1
0 2 2
0 3 1
1 2 1
2 4 1
3 4 1
Sample Output
   2 4
   

   //
//  Dijkstra
//  ACM
//  Find the number of minimal path
//
//  Created by Rachel on 18-2-12.
//  Copyright (c) 2014年 ZJU. All rights reserved.
//

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;stdio.h&gt;
#include &lt;functional&gt;
#include &lt;utility&gt;
#include &lt;memory.h&gt;
using namespace std;
#define N 505
#define INF 100000000
#define min(a,b) a&lt;b?a:b
#define max(a,b) a&gt;b?a:b

int map[N][N];
int minres[N]; //min distance from source to point_i
bool visited[N];
int weight[N];

void init(int n)
{
    int i,j;
    for (i=0; i&lt;n; i++) {
 for (j=0; j&lt;n; j++) {
     map[i][j] = INF;
 }
 minres[i] = INF;
    }
    memset(visited, false, sizeof(visited));
}

void dijkstra(int source, int dest, int n)
{
    int i,j;
    for(i=0;i&lt;n;i++)
 minres[i]=map[source][i];
    visited[source]=true;
    
    // (n-1) times, each time select one point into the start point set
    for (j=0; j&lt;n-1; j++) {
 //select a point to add into the start point set
 int minn = INF, point=-1;
 for(i=0;i&lt;n;i++)
     if (!visited[i]&amp;&amp;minres[i]&lt;minn) {
  minn = minres[i];
  point = i;
     }
 visited[point] = true;
 
 //update the min distance of other points
 for (i=0; i&lt;n; i++) {
     if (!visited[i]&amp;&amp;minres[i]&gt;minres[point]+map[point][i]) {
  minres[i] = minres[point]+map[point][i];
     }
 }
    }
}

void dfs(int source, int dest,int n, int curpoint, int curdis, int cursum, int* num, int* sum)
{
    if (curpoint==dest &amp;&amp; minres[dest]==curdis) {
 *num = *num+1;
 *sum = max(*sum, cursum);
 return;
    }
    if (curdis&gt;minres[dest])
 return;
    for (int i=0; i&lt;n; i++) {
 if(!visited[i]&amp;&amp;map[curpoint][i]!=INF)
 {
     visited[i] = true;
     dfs(source, dest, n, i, curdis+map[curpoint][i], cursum+weight[i], num, sum);
     visited[i] = false;
 }
    }
}

int main()
{
    int i,m,n,a,b,t,source,dest;
    while (cin&gt;&gt;n&gt;&gt;m) {
 cin&gt;&gt;source&gt;&gt;dest;
 for (i=0; i&lt;n; i++) {
     cin&gt;&gt;weight[i]; //#peoples @ each point
 }
 init(n);
 for(i=0;i&lt;m;i++)
 {
     scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;t);
     map[b][a] = map[a][b]= min(map[a][b],t);
 }
 dijkstra(source,dest,n);
 minres[source] = 0;
 int num = 0, sum = 0;
 memset(visited, false, sizeof(visited));
 visited[source] = true;
 dfs(source, dest, n, source, 0, weight[source], &amp;num, &amp;sum);
 cout&lt;&lt;num&lt;&lt;&quot; &quot;&lt;&lt;sum&lt;&lt;endl;
    }
}

   

   

   关于Algorithms更多的学习资料将继续更新，敬请关注本博客和新浪微博Rachel Zhang。