转的一篇不错的文章。老手，总会去到类似瓶颈的地方，每天上班下班，泡网泡论坛，浑浑噩噩。想再有寸进，总要下一些决心，今晚记下来以自律：

 1.安静的读书
 虽然书中的资讯比网络滞后，中文版的翻译更再慢上一截。但书本的深度总结，比零零散散的网络资讯要深刻、完整而有条理得多。
 还是那句，看书最好中文(翻译太烂的除外)。
 还是那那句，看书最好晚上，工作时间偷的或者零碎时间挤的，不适合。
 架构师书单仍在继续。

 
 2.网媒只看深度文章
 比如IBM DeveloperWorks、InfoQ、TheServerSide、today.java.net的的Article栏目，还有JavaWorld和OnJava。
 其中IBM DW和InfoQ都有中文站，不急着看的文章可以等他们先翻成中文。

 另外值得看的是一些年会如JavaOne2007、QCon2007....的PPT，它们是全年热点的风向标，而PPT又言简意赅，看起来效率很高。

 3.Don't spend many time on Forum、Blog 和 News site
 有兄弟号称每天花两个小时看Blog，这实在太多了。
 它们只该作为零碎时间里的打发，或是孤独感的渲泄，而不能倚为主要的知识获取途径。
 这类网站，无论中英文都没有本质区别，东西看了当然会有收获，但总有在沙里淘金的感觉。
 Web2.0推行全民参与，但信息的爆炸又使我反向的开始迷恋前面重的，传统的书和文章。

 4.有技巧的阅读开源项目代码
 基础理论看得差不多，但自己的项目也就作成那个样了，想再有突破，阅读代码是不错的途径。
 但阅读之后却未必就能突破，很多时候看完也就看完了而已。

 所以，先要有阅读的目标，规划好到底想从中学习什么，比如看mule ，要看它的SEDA，它对协议层的屏蔽，它对TCP、 IBM MQ Serires的封装实现，它的JMX Agent等等。如果你想不到为什么看它，比如看Spring只是觉得它最近挺火的而不是工作上有什么关联需要借鉴........那懵懂的扎进去，只能记下一段段的这里A调用B、B调用C、C调用A....(现在的代码一般职责分配都很细，动不动就A调B，B调C)，每个小类要看完看懂都不难，但辛苦追踪完这些调用关系并不是你的阅读目标，即使开始真的仅仅因为Spring火而去读它，也要在阅读之中尽快发现亮点，找寻目标。 

 5.笔记笔记
 笔记，而且是有条理成文章的笔记，也许是对抗自己每天浑浑噩噩泡在网上，眼前流过大量资讯的那种虚无感的唯一工具。

 6.总结
 定位高质的、对自己进步最有帮助的知识来源，脱离泡网的虚无状态，高效使用时间。