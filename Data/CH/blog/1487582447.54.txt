Radar InstallationRadar Installation


   Time Limit:1000MS Memory Limit:10000KTotal Submit:55 Accepted:18 


   Description 


   Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates.  Figure A Sample Input of Radar Installations


   Input 


   The input consists of several test cases. The first line of each case contains two integers n (1&lt;=n&lt;=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. The input is terminated by a line containing pair of zeros


   Output 


   For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. "-1" installation means no solution for that case.


   Sample Input 


   

   3 2
1 2
-3 1
2 1

1 2
0 2

0 0



   


   Sample Output 


   

   Case 1: 2
Case 2: 1

   #include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

int x[1010], y[1010];
struct PN
{
	double left;
	double right;
}q[1010];

int cmp( const void *a, const void *b )
{
	PN *c = (PN *)a;
	PN *d = (PN *)b;
	if( c-&gt;left&gt;d-&gt;left )///////////升序
		return 1;
	return -1;
}

int main()
{
	int i, n, d, sign, s=0;

	while( scanf("%d%d", &amp;n, &amp;d)!=EOF&amp;&amp; (n||d) )
	{
		sign = 1;
		if( d&lt;=0 )
			sign = 0;

		for( i=1; i&lt;=n; ++i )
		{
			scanf("%d%d", &amp;x[i], &amp;y[i]);
			if( y[i]&gt;d&amp;&amp;sign )
				sign = 0;
		}

		s++;
		printf("Case %d: ",s);

		if( sign )
		{
			for( i=1; i&lt;=n; ++i )
			{
				double t = sqrt(double(d*d-y[i]*y[i]));
				q[i].left = x[i]-t;
				q[i].right = x[i]+t;
			}
			qsort(q+1,n,sizeof(q[1]),cmp);
			
			int min;
			double  high;

			min=1;
			high = q[1].right;

			for( i=2; i&lt;=n; ++i )
			{
				if( q[i].left&gt;high )
				{
					min++;
					high = q[i].right;
				}
				else
					high = q[i].right&lt;high?q[i].right:high;
			}
			printf("%d/n", min);
		}
		else
		{
			printf("-1/n");
		}
	}

	return 0;
}

 

   以区间左端点升序排列，选择右端点为圆心。每次查找是否能将下一个点包含进来。