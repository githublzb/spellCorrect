二分图最大权匹配 、 最小权匹配 模板KM 算法，详细资料见上一篇，此处只贴模板


   


   #include &lt;iostream&gt;
#include &lt;string.h&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
using namespace std;
int max(int a,int b)
{return a&lt;b?b:a;}

int min(int a,int b)
{return a&lt;b?a:b;}

const int size = 160;
const int INF = 100000000;

bool map[size][size];  // 二分图的相等子图, map[i][j] = true 代表Xi与Yj有边
bool sx[size], sy[size]; // 标记在一次DFS中，Xi与Yi是否在交错树上
int match[size];      // 保存匹配信息，其中i为Y中的顶点标号，match[i]为X中顶点标号

bool DFS(int, const int);
void KM_Perfect_Match(const int n, const int edge[][size])
{
	int i, j;
	int lx[size], ly[size];   // KM算法中Xi与Yi的标号
	for(i = 0; i &lt; n; i++)
	{
		lx[i] = -INF;
		ly[i] = 0;
		for(j = 0; j &lt; n; j++)
		{
			lx[i] = max(lx[i], edge[i][j]);
		}
	}
	bool perfect = false;
	while(!perfect) 
	{
		// 初始化邻接矩阵
		for(i = 0; i &lt; n; i++)
		{
			for(j = 0; j &lt; n; j++) 
			{
				if(lx[i]+ly[j] == edge[i][j])
					map[i][j] = true;
				else map[i][j] = false;
			}
		}
		// 匹配过程
		int live = 0;
		memset(match, -1, sizeof(match));
		for(i = 0; i &lt; n; i++) {
			memset(sx, false, sizeof(sx));
			memset(sy, false, sizeof(sy));
			if(DFS(i, n)) live++;
			else {
				sx[i] = true;
				break;
			}
		}
		if(live == n) perfect = true;
		else {
			// 修改标号过程
			int ex = INF;
			for(i = 0; i &lt; n; i++) 
			{
				for(j = 0; sx[i] &amp;&amp; j &lt; n; j++) 
				{
					if(!sy[j]) 
						ex = min(ex, lx[i]+ly[j]-edge[i][j]);
				}
			}
			for(i = 0; i &lt; n; i++) 
			{
				if(sx[i]) lx[i] -= ex;
				if(sy[i]) ly[i] += ex;
			}
		}
	}
}

bool DFS(int p, const int n)//find augment path from X[p]
{
	int i;
	for(i = 0; i &lt; n; i++)
	{
		if(!sy[i] &amp;&amp; map[p][i]) 
		{
			sy[i] = true;
			int t = match[i];
			match[i] = p;
			if(t == -1 || DFS(t, n))
			{
				return true;
			}
			match[i] = t;
			if(t != -1) sx[t] = true;
		}
	}
	return false;
}

int main()
{
	int n, edge[size][size]; // edge[i][j]为连接Xi与Yj的边的权值
	int i;
	int m;
	/***************************************************
	*record edge[i][j] as edge value between vertex i in X and vertex j in Y
	*save n as vertexs need to be match (used in KM_Perfect_Match(n, edge);)
	***************************************************/
	int s,d,pow;

	while(scanf("%d%d",&amp;n,&amp;m)!=EOF)
	{
		if(n==0 &amp;&amp; m==0) break;
		memset(edge,0,sizeof(edge));
		/*最小权: 去掉memset(edge,0,sizeof(edge));改为如下：
		for(i=0;i&lt;n;i++)
			for(int j=0;j&lt;n;j++)
				edge[i][j]=-INF;
		*/
		memset(sx,0,sizeof(sx));
		memset(sy,0,sizeof(sy));
		memset(match,0,sizeof(0));
		while(m--)
		{
			scanf("%d%d%d",&amp;s,&amp;d,&amp;pow);
			s--;d--;
			/*最小权：edge[s][d]=pow; 改为edge[s][d]= - pow;*/
			edge[s][d]=pow;
		}
		KM_Perfect_Match(n, edge);
		int cost = 0;
		for(i=0;i&lt;n;i++) 
		{
			cost += edge[match[i]][i];
		}
		/*最小权：output 改为 -cost*/
		cout&lt;&lt;cost&lt;&lt;endl;
	}
	// cost 为最大匹配的总和, match[]中保存匹配信息
	return 0;
}
 


   


   上面模板不好，会超时，关键是没有处理slack


   


   #include&lt;iostream&gt;
using namespace std;
#define maxn 502
#define INF 0xfffffff

int sx[maxn], sy[maxn], mat[maxn][maxn];
int x[maxn], y[maxn], link[maxn];
int N, M, slack;
int DFS(int t)
{    
	int i, tmp;    
	sx[t] = 1;    
	for (i = 0; i &lt; M; i++)
	{ 
		if (!sy[i])
		{     
			tmp = x[t] + y[i] - mat[t][i];     
			if (tmp == 0)
			{  
				sy[i] = 1;  
				if (link[i] == -1 || DFS(link[i]))
				{      
					link[i] = t;      
					return 1;  
				}     
			}
			else if (tmp &lt; slack)  
				slack = tmp; 
		}
	}    
	return 0;
}
void KM()
{    
	int i, j;    
	for (i = 0; i &lt; N; i++)
	{ 
		x[i] = 0; 
		for (j = 0; j &lt; M; j++)
		{     
			if (mat[i][j] &gt; x[i])  
				x[i] = mat[i][j]; 
		}    
	} 
	for (j = 0; j &lt; M; j++)
	{ 
		y[j] = 0;    
	} 
	memset(link, -1, sizeof(link));    
	for (i = 0; i &lt; N; i++)
	{    
		while (1) 
		{     
			memset(sx, 0, sizeof(sx));     
			memset(sy, 0, sizeof(sy));   
			slack = INF;     
			if (DFS(i)) break;     
			for (j = 0; j &lt; N; j++)
			{  
				if (sx[j])    
					x[j] -= slack;     
			}   
			for (j = 0; j &lt; M; j++)
			{  
				if (sy[j])    
					y[j] += slack;     
			} 
		}    
	}
}
int main(){    
	int i,j,a,b,c,t,ans,E;    
	int cnt = 1;    
	while (scanf("%d%d%d", &amp;N, &amp;M, &amp;E) != EOF)
	{ 
		for (i = 0; i &lt; N; i++)     
			for (j = 0; j &lt; M; j++)  
				mat[i][j] = -INF;     
		if (E == 0)
		{ 
			printf("Case %d: ", cnt++); 
			puts("-1");  
			continue;    
		}    
		for(i=0;i&lt;E;i++)
		{  
			scanf("%d%d%d", &amp;a, &amp;b, &amp;c);  
			if (c &lt; 0)      
				continue;  
			mat[a][b] = c;     
		}   
		KM();    
		printf("Case %d: ", cnt++);     
		ans = 0;     
		int count = 0;    
		for (i = 0; i &lt; M; i++)
		{  
			t = link[i];  
			if (t &gt;= 0 &amp;&amp; mat[t][i] != -INF)
			{      
				count ++;      
				ans += mat[t][i];  
			}     
		}   
		printf("%d/n", ans);    
	}    
	return 0;
}