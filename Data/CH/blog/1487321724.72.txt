多核编程之流水线技术假定一个工作(work)，可以切分成n段工序(task)，每段工序独立完成，下一个工序依赖上一个工序，但上一个工序不会依赖下一个工序（依赖仅限于最终结果的依赖，工序间的依赖不一定必然，可有可无没有限制），即


    W[0,n]=T[0,1]T[1,2]T[2,3]...T[n-1,n]


   


    Cost(T[i,j]) = C（假定每个工序的划分最佳，完成工序的代价相等为一个常数C）


   


    则如果串行执行，完成m个相同工作，需要mnC个工时。


    


    如果采用n级流水的方式来进行处理。


    第一个work完成，需要nC个工时，


    此后每一个C工时后，完成一个任务。


    因此完成全部工时的时间代价为nC+(m-1)C=(n+m-1)C


    


    则加速比 = mnC/(n+m-1)C = mn/(m+n-1)


    如果考虑到m远大于n，则近似 = mn/m = n


    


    则n级流水比1级流水提高n倍，多核的优势完全发挥。


   


    但问题是每个工序执行时间相当，在编程上几乎不可能，流水线的流速受到最慢工序的拖累，工序切分过细也不可能CPU核有线，切分过细来回切换成本也大。


   


    但流水线技术是计算高并发的一种常用方法，更多请参见参考文献。


   


   参考文献：


   http://www.sccas.cn/gb/learn/download/presentation.pdf