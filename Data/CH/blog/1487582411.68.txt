最大连续和 变种版Problem F:最大和子序列


   Time Limit:1000MS Memory Limit:65536KTotal Submit:21 Accepted:5 


   Description 


   给一个整数数组A={a1,a2,&hellip;an}, 将这个数组首尾相接连成一个环状，它的一个子序列是指这个数组连续的一段，比如a2,a3&hellip;ak，或者an,a1&hellip;ai。请从这个环上选取两个不重叠的非空子序列，使这两个子序列中的所有数字之和最大。 在三个样例中分别选取的子序列是: 样例一: {a1} {a3} 样例二: {a1} {a3} 样例三: {a5,a1} {a3} 


   Input 


   输入的第一行包含一个正整数T(1&lt;=T&lt;=40)，表示有T组测试数据。 接下来每个测试数据包含两行，第一行是一个正整数n(2&lt;=n&lt;=50000), 第二行是用空格隔开的数组A的n个数，依次为a1,a2,&hellip;an (|ai|&lt;=10000)。 


   Output 


   每组数据输出一行，包含一个数，即所求的这两个子序列的元素之和。


   Sample Input 


   

   3
3
1 -1 0
4
1 -1 1 -1
5
1 -1 1 -1 1




   


   Sample Output 


   

   1
2
3


   #include&lt;stdio.h&gt;

#define INF 100000000
#define max(x,y) (x&gt;y?x:y)
#define min(x,y) (x&lt;y?x:y)

int a[50010];
int hmax[50010],tmax[50010],hmin[50010],tmin[50010];

int main()
{
	int cas;
	scanf("%d",&amp;cas);
	while(cas--)
	{
		int i,n,t,sum,ans,maxNum;
		scanf("%d",&amp;n);
		sum=0;
		maxNum=-INF;
		//input a new element and calculate
		for(i=1;i&lt;=n;++i)
		{
			scanf("%d",&amp;a[i]);
			if(maxNum&lt;a[i]) //cal max num
				maxNum=a[i];
			sum+=a[i]; //cal sum, in order to deal with the circle cal
		}
		t=0;
		for(i=1;i&lt;=n;i++)//cal 最大连续和 from head
		{
			hmax[0]=-INF;
			t+=a[i];
			hmax[i]=max(hmax[i-1],t);//i numbers' max contigious sum from index:1
			if(t&lt;0) 
				t=0;
		}
		t=0;
		tmax[n+1]=-INF;
		for(i=n;i&gt;=1;--i)//cal 最大连续和 from tail
		{
			t+=a[i];
			tmax[i]=max(tmax[i+1],t);//cal i numbers' max contigious sum from index:n
			if(t&lt;0)
				t=0;
		}
		t=0;
		hmin[0]=INF;
		for(i=1;i&lt;=n;++i)//cal 最小连续和 from head
		{
			t+=a[i];
			hmin[i]=min(hmin[i-1],t);
			if(t&gt;0) t=0;
		}
		t=0;
		tmin[n+1]=INF;
		for(i=n;i&gt;=1;--i)//cal 最小连续和 from tail
		{
			t+=a[i];
			tmin[i]=min(tmin[i+1],t);
			if(t&gt;0) t=0;
		}
		ans=-INF;
		for(i=1;i&lt;n;i++)//cal the ans without circle
		{
			if(ans&lt;hmax[i]+tmax[i+1])
				ans=hmax[i]+tmax[i+1];
		}
		for(i=1;i&lt;n;i++)//deal with the circle
		{
			t=sum-(hmin[i]+tmin[i+1]);
			//hmin[i]+tmin[i+1] must be nagative, or part of them must can be added into hmax or tmax
			if(t!=0&amp;&amp;ans&lt;t)
				ans=t;
		}
		printf("%d/n",ans);
	}
	return 0;
}