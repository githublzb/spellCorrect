在空间复杂度O(1)的条件下实现归并排序[原创]第一：对一个L1,L2,的子序列，分别长度为，m,n.可以用min(m,n)的空间协助进行归并排序，且仅对该额外空间的值得顺序有影响。详细参见sara basse的那本算法书.


   第二：对于一个已经排序的L1,L2,总长度假定为u,为了方便分析,假定L1的长度=L2的长度=u/2,切分成sqrt(u)的个块，每个快有sqrt(u)个数，然后对L1,的最后一块和L2的最后一块归并，L2的最后一块存放全部数据的最大数据，同时也是利用L2的这个最后一块作为下面归并的额外空间。


   第三：对剩余的块(除L2最后一块,那块存放最大元素的那块),按照块的最小元素排序，之后依次归并相邻块。


   第四：对最后一块进行排序，因为他作为额外空间，参与了两两相邻的块排序,自己的顺序不能保证,所以最后还要排序一次。


   


   这种方法的正确性可以这样来简单解释


   由于最后的分块都是从L1或者L2中切下来的。


   那么第i块，第i+1块和第i+2块（如果按照最小元素排序的话）


   不妨假定第i块来自L1，第i+1块来自L2。（i，i+1，i+2，是切下来后的编号，例如例子中第1块是1 4 6 15是L1的第一块，第2块2 3 4 16是L2的第1块）


   那么i+2块可能来自哪里呢？要么是原L1块在第i块后面，要么是原L2块在i+1块后面的块。也就是第i+1块至少比N个数要大（N为块内数目），换言之i和i+1块归并后的最小块i'块均比i+1块小，这一点是本算法的难点，想明白后，就不难理解了。


   因此i和i+1这两块归并后的i&lsquo;块的最大元素，一定比i+1块的最小元素要小，因此正确性可以保证。


   


   画个图来举例：


   


   


   图1 通过对L1和L2的最大块进行归并，用一个4个元素的交换空间，得到L1&amp;L2的最大块22 23 24 25


   


   


   


    图2 将归并顺序按照块最小元素的顺序进行归并，并利用交换空间


   


   


   


   图3 利用交换空间归并的过程，注意归并后交换空间的数依然是22 23 24 25，但顺序已经变了，因此在归并到最后还需要再排序一次


   


   4 5 6 15 和16 17 2021的归并不再图示。