树状DP- hdu 1011 Starship TroopersStarship Troopers


   Time Limit: 10000/5000 MS (Java/Others)Memory Limit: 65536/32768 K (Java/Others)Total Submission(s): 2089Accepted Submission(s): 483


   Problem Description


   You, the leader of Starship Troopers, are sent to destroy a base of the bugs. The base is built underground. It is actually a huge cavern, which consists of many rooms connected with tunnels. Each room is occupied by some bugs, and their brains hide in some of the rooms. Scientists have just developed a new weapon and want to experiment it on some brains. Your task is to destroy the whole base, and capture as many brains as possible.To kill all the bugs is always easier than to capture their brains. A map is drawn for you, with all the rooms marked by the amount of bugs inside, and the possibility of containing a brain. The cavern's structure is like a tree in such a way that there is one unique path leading to each room from the entrance. To finish the battle as soon as possible, you do not want to wait for the troopers to clear a room before advancing to the next one, instead you have to leave some troopers at each room passed to fight all the bugs inside. The troopers never re-enter a room where they have visited before.A starship trooper can fight against 20 bugs. Since you do not have enough troopers, you can only take some of the rooms and let the nerve gas do the rest of the job. At the mean time, you should maximize the possibility of capturing a brain. To simplify the problem, just maximize the sum of all the possibilities of containing brains for the taken rooms. Making such a plan is a difficult job. You need the help of a computer.


   


   


   Input


   The input contains several test cases. The first line of each test case contains two integers N (0 &lt; N &lt;= 100) and M (0 &lt;= M &lt;= 100), which are the number of rooms in the cavern and the number of starship troopers you have, respectively. The following N lines give the description of the rooms. Each line contains two non-negative integers -- the amount of bugs inside and the possibility of containing a brain, respectively. The next N - 1 lines give the description of tunnels. Each tunnel is described by two integers, which are the indices of the two rooms it connects. Rooms are numbered from 1 and room 1 is the entrance to the cavern.The last test case is followed by two -1's.


   


   


   Output


   For each test case, print on a single line the maximum sum of all the possibilities of containing brains for the taken rooms.


   


   


   Sample Input


   5 10


   50 10


   40 10


   40 20


   65 30


   70 30


   1 2


   1 3


   2 4


   2 5


   1 1


   20 7


   -1 -1


   


   


   Sample Output


   50


   7


   


   


   Author


   XU, Chuan


   


   


   Source


   ZJCPC2004 


   


   


   Recommend


   JGShining


   


   树状dp+01背包


   每一个节点（物品）只能用一次，背包容量大小为战士数，求能获得的max价值


   dp[u][p]表示在u节点放置p个人(这p个人由父节点分配给其子节点)所能达到的maximum sum of all the possibilities of containing brains.


   那么对于任一节点有dp[u][j]=max{dp[u][j-k]+dp[v][k]}; 其中u是v的father


   


   #include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;
#define M 110
#define INF 0x3fffffff

int n,m;
vector&lt;int&gt;G[M];
int bug[M],brain[M];
bool visited[M];
int dp[M][M];//dp[vertex i][people num] is  maximum sum of all the possibilities of containing brains travel from vertex i
void dfs(int u)
{
	int i,j,k;
	visited[u]=true;
	for(i=1;i&lt;=m;i++)
		dp[u][i]=-INF;
	dp[u][0]=0;
	int t=(bug[u]+19)/20;
	if(t&lt;=m)//people number is enough
		dp[u][t]=brain[u];
	for(i=0;i&lt;G[u].size();i++)			//0-1 package problem
	{
		int v=G[u][i];
		if(!visited[v])
		{
			dfs(v);
			for(j=m;j&gt;t;j--)
				for(k=1;j-k&gt;=t;k++)
					if(dp[u][j-k]!=-INF&amp;&amp;dp[v][k]!=-INF&amp;&amp;dp[u][j]&lt;dp[u][j-k]+dp[v][k])
						dp[u][j]=dp[u][j-k]+dp[v][k];
		}
	}
	if(dp[u][0]&gt;0)
	{
		dp[u][1]=max(dp[u][1],dp[u][0]);
		dp[u][0]=0;
	}
}

int main()
{
	int a,b,i,j,ans;
	while(scanf("%d%d",&amp;n,&amp;m)!=EOF&amp;&amp;n!=-1)
	{
		for(i=1;i&lt;=n;i++)
		{
			scanf("%d%d",&amp;bug[i],&amp;brain[i]);
			G[i].clear();
		}
		for(i=1;i&lt;n;i++)
		{
			scanf("%d%d",&amp;a,&amp;b);
			G[a].push_back(b);
			G[b].push_back(a);
		}
		memset(visited,false,sizeof(visited));
		ans=0;
		dfs(1);//1 is entrance
		for(j=1;j&lt;=m;j++)
			ans=max(ans,dp[1][j]);
		printf("%d/n",ans);
	}
	return 0;
}