模板[最长递增子序列] O(nlogn)acm



   Southeastern European Regional Programming Contest


   Bucharest, Romania


   October 18, 2008




   


   


   


   


   Problem A


   Stock Exchange


   


   


   


   Input File: A.IN


   Output File: standard output


   Program Source File: A.C, A.CPP, A.JAVA


   


   The world financial crisis is quite a subject. Some people are more relaxed while others are quite anxious. John is one of them. He is very concerned about the evolution of the stock exchange. He follows stock prices every day looking for rising trends. Given a sequence of numbers p1, p2,...,pn representing stock prices, a rising trend is a subsequence pi1&lt; pi2 &lt; &middot; &middot; &middot; &lt; pik, with i1 &lt; i2 &lt; &middot; &middot; &middot; &lt; ik. John&rsquo;s problem is to find very quickly the longest rising trend.


   The program input is from a text file. Each data set in the file stands for a particular set of stock prices. A data set starts with the length L (L &le; 100000) of the sequence of numbers, followed by the numbers (a number fits a long integer). The program prints the length of the longest rising trend.


   White spaces can occur freely in the input. The input data are correct and


   terminate with an end of file. For each set of data the program prints the result to the standard output from the beginning of a line. An input/output sample is in the table bellow. There are three data sets. In the first case, the length L of the sequence is 6. The sequence is 5, 2, 1, 4, 5, 3. The result for the data set is the length of the longest rising trend: 3.


   






   Input




   Output






   6


   5 2 1 4 5 3


   3


   1 1 1


   4


   4 3 2 1




   3


   1


   1






   


   //最长递增子序列


   #include &lt;iostream&gt;
#define N 100010 
using namespace std;

int main()
{
	int i, j, n, top, temp;
	int stack[N];
	while(scanf("%d",&amp;n)!=EOF)
	{
		top=0;
		stack[0]=-1;
		for(i=0;i&lt;n;i++)
		{
			scanf("%d",&amp;temp);
			if(temp&gt;stack[top])
				stack[++top]=temp;
			else
			{
				int low=1,high=top,mid;
				while(low&lt;=high)
				{
					mid=(low+high)&gt;&gt;1;
					if(temp&gt;stack[mid])
						low=mid+1;
					else
						high=mid-1;
				}
				stack[low]=temp;
			}
		}
		printf("%d/n",top);
	}
	return 0;
}

 


   


   //最长不降子序列

#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include&lt;stdlib.h&gt;
int f[100001],a[100001],c[100001];
int n,size;
int bsearch(int ai)
{
	int l=1,r=size,mid;
	while (l&lt;=r)
	{
		mid=(l+r)&gt;&gt;1;
		if (ai&lt;c[mid-1] &amp;&amp; ai&gt;=c[mid])
			return mid;
		else if (ai&lt;c[mid]) l=mid+1;
		else r=mid-1;
	}
}
int main()
{
	while(scanf("%d",&amp;n)!=EOF)
	{
		for (int i=1;i&lt;=n;i++)
			scanf("%d",&amp;a[i]);
		f[1]=1;
		c[1]=a[1];
		size=1;
		for (int i=2;i&lt;=n;i++)
		{
			if (a[i]==0)
				continue;
			int j;
			if (a[i]&gt;=c[1])
				j=1;
			else if (a[i]&lt;c[size])
				j=++size;
			else 
				j=bsearch(a[i]);
			f[i]=j;
			c[j]=a[i];
		}
		printf("%d/n",size);
	}
	return 0;
}