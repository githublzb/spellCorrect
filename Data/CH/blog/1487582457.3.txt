设计模式之单例模式（singleton模式）笔者工作中第一次遇到的模式就是单例模式了，单例模式简单好用，但是极容易被滥用，尤其在小型系统中。


   




   WIKI是这么解释单例模式的，我个人觉得很精确。


   


   
单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。


   
实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。


   
单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。
 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。




   在实际的项目中，我是这样做的：　


   




   实现一个单例的模板：


   

template&lt;typename T&gt;

class USingletonTemplate

{

public:

// Get the object.

static T&amp; GetInstance()

{

if (_instance == NULL)

{





Project::Tools::Scoped_Lock&lt;Project::Tools::Mutex&gt; lock(mutex);

if (_instance == NULL)

{

_instance = new T();

atexit(Destroy);

}

}





return *_instance;

}





protected:

USingletonTemplate() {};

// destructor

~USingletonTemplate(){};

private:

// constructor





USingletonTemplate(const USingletonTemplate&amp;);

USingletonTemplate&amp; operator=(const USingletonTemplate&amp;);





static void Destroy()

{

if (_instance != NULL)

{

delete _instance;

_instance = NULL;

}

}

// data members

static Project::Tools::Mutex mutex;

static T* volatile _instance;

};





template&lt;typename T&gt;

Project::Tools::Mutex USingletonTemplate&lt;T&gt;::mutex;





template&lt;typename T&gt;

T* volatile USingletonTemplate&lt;T&gt;::_instance= NULL;




   




   其中mutex自己封装的互斥信号量，scopelock是局部的自动锁，构造时加锁，析构时释放锁


   




   定义一个新模板的single类时，只需要这样继承


   Class A : PublicUSingletonTemplate&lt;A&gt;


   {


   .......


   }


   这样类A就是默认singleton的了


   




   singleton的实现核心在getsintance这个函数里。里面的细节很多人都有文章介绍过了，主要就是要


   采用双重枷锁机制，也就是本例子采用的例子，用来保证线程安全。


   




   更详细的信息见：


   http://calmness.iteye.com/blog/60179


   




   个人建议这个模式能不用就不用。主要原因如下：


   １.　无法保证类的创建和析构时间，你无法保证析构函数的执行时间。这对于某些资源的释放，是一个很大的难题。


   ２.　多线程问题，这个问题是可以避免的，


   ３.　容易造成系统的设计混乱。我个人认为滥用单例模式是反模式的，单例的类就是一个一个的孤岛，会影响到


   系统中类与类之间的关系。