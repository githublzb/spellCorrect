ParencodingsParencodings

   Time Limit: 2000/1000 MS (Java/Others)Memory Limit: 65536/32768 K (Java/Others)Total Submission(s): 134Accepted Submission(s): 89

Problem Description

Let S = s1 s2 &hellip; s2n be a well-formed string of parentheses. S can be encoded in two different ways:


By an integer sequence P = p1 p2 &hellip; pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).
By an integer sequence W = w1 w2 &hellip; wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence).

Following is an example of the above encodings:

   S(((()()())))P-sequence    4 5 6666W-sequence    1 1 1456
Write a program to convert P-sequence of a well-formed string to the W-sequence of the same string.




   

Input

The first line of the input file contains a single integer t (1 t 10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1 n 20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence.




   

Output

The output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence.




   

Sample Input



   2
6
4 5 6 6 6 6
9 
4 6 6 6 6 8 9 9 9






   

Sample Output



   1 1 1 4 5 6
1 1 2 4 5 1 1 3 9
#include &lt;iostream&gt;
#include "stdio.h"
using namespace std;
int in[20];
int old[41];
int p[41];
int w[41];
int main()
{
	int testcase;
	int num;
	int temp;
	int count;
	scanf("%d", &amp;testcase);
	while(testcase--)
	{
		scanf("%d", &amp;num);
		for(int i = 1; i &lt;= num; ++i)
			scanf("%d", &amp;p[i]);
		in[0] = 0;
		count = 0;
		for(int i = 1; i &lt;= num; ++i)
		{
			temp = p[i] - p[i-1];
			for(int j = 1; j &lt;= temp; ++j)
			{
				old[++count] = 0;//-&gt;'('
			}
			old[++count] = 1;//')'
		}///give the old xulie
		count = 0;
		for(int i = 1; i &lt;= num*2; ++i)
		{
			if(old[i] == 1)
			{
				for(int j = i; j &gt;=1; --j)
				{
					if(old[j] == 2) count++;
					if(old[j] == 0) 
					{
						old[j] = 2;
						count++;
						break;
					}
				}
				printf("%d", count);
				count = 0;
				if(i &lt; num*2) printf(" ");
			}
		}///deal the pro

		printf("/n");

	}

	return 0;
}