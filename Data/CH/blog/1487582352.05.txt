题目1005：Graduate Admission大模拟……吐血


   


题目1005：Graduate Admission



   
时间限制：1 秒


   
内存限制：32 兆


   
特殊判题：否


   
提交：693


   
解决：148






题目描述：

   
 It is said that in 2011, there are about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.

 Each applicant will have to provide two grades: the national entrance exam grade GE, and the interview grade GI. The final grade of an applicant is (GE &#43; GI) / 2. The admission rules are:


   
 • The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.

 • If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade GE. If still tied, their ranks must be the same.

 • Each applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one's turn to be admitted; and if the quota of one's most preferred shcool is not exceeded, then one will be admitted to
 this school, or one's other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.

 • If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.




输入：

   
 Each input file may contain more thanone test case.

 Each case starts with a line containing three positive integers: N (≤40,000), the total number of applicants; M (≤100), the total number of graduate schools; and K (≤5), the number of choices an applicant may have.

 In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively.

 Then N lines follow, each contains 2&#43;K integers separated by a space. The first 2 integers are the applicant's GE and GI, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered
 from 0 to M-1, and the applicants are numbered from 0 to N-1.




输出：

   
 For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants' numbers that school admits. The numbers must be in increasing
 order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.




样例输入：

   11 6 3
2 1 2 2 2 3
100 100 0 1 2
60 60 2 3 5
100 90 0 3 4
90 100 1 2 0
90 90 5 1 3
80 90 1 0 2
80 80 0 1 2
80 80 0 1 2
80 70 1 3 2
70 80 1 2 3
100 100 0 2 4



样例输出：

   0 10
3
5 6 7
2 8

1 4






   #include &quot;iostream&quot;
#include &quot;stdio.h&quot;
#include &quot;math.h&quot;
#include &quot;map&quot;
#include &quot;vector&quot;
#include &quot;queue&quot;
#include &quot;memory.h&quot;
#include &quot;algorithm&quot;
#include &quot;string&quot;
using namespace std;
#define N 40005
#define M 105
#define INF 1&lt;&lt;29
#define max(a,b) a&gt;b?a:b

struct Stu
{
    int ge;
    int gi;
    int prefer[10];
    int id;
    int selectschool;
}s[N];
int quota[M];
Stu score[M];
int rev[M][N];
int num[M];

int comp(const void *A,const void *B)
{
    Stu* a=(Stu*)A;
    Stu* b=(Stu*)B;
    if(a-&gt;ge+a-&gt;gi==b-&gt;ge+b-&gt;gi)
 return b-&gt;ge&gt;a-&gt;ge;
    return b-&gt;ge+b-&gt;gi&gt;a-&gt;ge+a-&gt;gi;
}

int comp2(const void *A,const void *B)
{
    Stu* a=(Stu*)A;
    Stu* b=(Stu*)B;
    return a-&gt;id-b-&gt;id;
}

bool Equal(Stu a,Stu b)
{
    if(a.ge==b.ge&amp;&amp;a.gi==b.gi)
 return true;
    return false;
}

int main()
{
    int n,m,k;
    while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k)
    {
 int i,j,t;
 for(i=0;i&lt;m;i++)
     cin&gt;&gt;quota[i];
 for(i=0;i&lt;n;i++)
 {
     scanf(&quot;%d%d&quot;,&amp;s[i].ge,&amp;s[i].gi);
     s[i].id=i;
     s[i].selectschool=-1;
     for(j=0;j&lt;k;j++)
  scanf(&quot;%d&quot;,&amp;s[i].prefer[j]);
 }
 qsort(s,n,sizeof(s[0]),comp);
 for(i=0;i&lt;n;i++)
 {
     for(j=0;j&lt;k;j++)
     {
  int sch=s[i].prefer[j];
  if(Equal(score[sch],s[i])||quota[sch]&gt;0)
  {
      //rev[sch][num[sch]++]=s[i].id;
      s[i].selectschool=sch;
      score[sch].ge=s[i].ge;
      score[sch].gi=s[i].gi;
      quota[sch]--;
      break;
  }
     }
 }
 
 memset(num,0,sizeof(num));
 qsort(s,n,sizeof(s[0]),comp2);
 
 for(i=0;i&lt;n;i++)
 {
     int sch=s[i].selectschool;
     if(sch!=-1)
rev[sch][num[sch]++]=s[i].id;
 }
     
 for(i=0;i&lt;m;i++)
 {
     for(j=0;j&lt;num[i]-1;j++)
  printf(&quot;%d &quot;,rev[i][j]);
     if(num[i]-1&gt;=0)
  printf(&quot;%d&quot;,rev[i][num[i]-1]);
     cout&lt;&lt;endl;
 }
    }
}