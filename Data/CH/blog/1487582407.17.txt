STL 的应用最近用了下STL，觉得很多工作轻松了不少~


   这里结合一道题说明！


   


   混杂游戏


   Time Limit:1000MS Memory Limit:65536KTotal Submit:80 Accepted:26 


   Description 


   以前流行玩一种文字游戏&mdash;&mdash;混杂。所谓混杂就是在一个已知的答案中解读一串被打乱的字符串。你的任务是写一个程序，解读这个难题。 


   Input 


   输入的第一行是一个整数T( 1 &lt;= T &lt;= 100 )，表示有几组输入数 据。 每组输入由4部分组成： (1)一个字典，最多包含2000个单词，每个单词一行。 (2)一行字符串"XXXXXX"，作为字典部分的结束标志。 (3)1个或多个( 最多2000个 )需要解读的字符串。每个一行。 (4) 一行字符串"XXXXXX"，作为解读部分的结束标志。 以上的每个单词都只有小写字母组成，最长不超过10。字典不一定是有序的。单词是唯一的。 


   Output 


   每组输出中，对应每个解读串A，如果有一个串B和A由相同的字母组成，则认为B可以解读A。在字典中找到所有可以解读A的串，并且以字典顺序输出,每个单词一行，然后输出一行"******"。如果没有找到符合条件的单词串，就输出一行"NO ONE"，然后输出一行"******"。 


   Sample Input 


   

   1
tarp
given
score
refund
only
trap
work
earn
course
pepper
part
XXXXXX
resco
nfudre
aptr
sett
oresuc
XXXXXX




   


   Sample Output 


   

   score
******
refund
******
part
tarp
trap
******
NO ONE 
******
course
******




   


   Source 


   


   典型的字典树，yes?


   here I tried to use a little easy method~


   record every letter'soccurance in each word


   and use stl in vector, use it to save string in dictionary


   


   #include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include&lt;map&gt;
using namespace std;
#define M 2005

int a[M][26],b[26];
vector&lt;string&gt;Q;

void main()
{
	int T;
	scanf("%d",&amp;T);
	string str;
	int flag;
	int i,j,index;
	while(T--)
	{
		Q.clear();
		index=0;
		while(cin&gt;&gt;str&amp;&amp;str!="XXXXXX")
		{
			Q.push_back(str);
			index++;
		}
		sort(Q.begin(),Q.end());
		for(i=0;i&lt;index;i++)
		{
			for (j=0;j&lt;26;j++)
				a[i][j]=0;
			for(j=0;j&lt;Q[i].length();j++)
				a[i][Q[i][j]-'a']++;
		}
		while(cin&gt;&gt;str&amp;&amp;str!="XXXXXX")
		{
			for(i=0;i&lt;26;i++)
				b[i]=0;
			for(i=0;i&lt;str.length();i++)
				b[str[i]-'a']++;
			flag=0;
			for(i=0;i&lt;index;i++)
			{
				for(j=0;j&lt;26;j++)
				{
					if(a[i][j]!=b[j])
						break;
				}
				if(j==26)
				{
					cout&lt;&lt;Q[i]&lt;&lt;endl;
					flag=1;
				}
			}
			if(!flag)
				cout&lt;&lt;"NO ONE"&lt;&lt;endl;
			cout&lt;&lt;"******"&lt;&lt;endl;
		}
	}
} 


   


   法二.use multimap to record as hash table


   


   #include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include&lt;map&gt;
using namespace std;

multimap&lt;string,string&gt;dic;
multimap&lt;string,string&gt;::iterator it,it2;


void main()
{
	int T;
	scanf("%d",&amp;T);
	string str;
	int flag;
	while(T--)
	{
		int sub=1;
		dic.clear();
		while(cin&gt;&gt;str&amp;&amp;str!="XXXXXX")
		{
			string temp=str;
			sort(str.begin(),str.end());
			//dic[str]=temp;
			dic.insert(pair&lt;string,string&gt;(str,temp));
		}
		string rec[2000];
		while(cin&gt;&gt;str&amp;&amp;str!="XXXXXX")
		{
			sort(str.begin(),str.end());

			flag=0;
			it=dic.find(str);
			if(it==dic.end())
				cout&lt;&lt;"NO ONE"&lt;&lt;endl;
			else
			{
				int index=0;
				for(it2=it;it2!=dic.end();it2++)
				{
					if((*it2).first!=str)
						break;
					else	rec[index++]=(*it2).second;
				}
				sort(rec,rec+index);
				for(int i=0;i&lt;index;i++)
					cout&lt;&lt;rec[i]&lt;&lt;endl;
				//cout&lt;&lt;(*it2).second&lt;&lt;endl;
			}
			cout&lt;&lt;"******"&lt;&lt;endl;
		}
	}
}