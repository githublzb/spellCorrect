Drainage Ditches 最大流Drainage Ditches


   Time Limit:1000MS Memory Limit:65536KTotal Submit:12 Accepted:6 


   Description 


   Every time it rains on Farmer John's fields, a pond forms over Bessie's favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie's clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch. Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network. Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle. 


   Input 


   The input includes several cases. For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.


   Output 


   For each case, output a single integer, the maximum rate at which water may emptied from the pond. 


   Sample Input 


   

   5 4
1 2 40
1 4 20
2 4 20
2 3 30
3 4 10




   


   Sample Output 


   

   50



   


   Source 


   USACO 93


   


   


   赤裸裸的最大流&hellip;&hellip;花了半下午看懂，后半下午写了一下&hellip;&hellip;


   #include&lt;iostream&gt;
#include&lt;queue&gt;
using namespace std;
#define N 210//point
#define M 210//edge
#define INF 1000000000
#define min(a,b) a&lt;b?a:b

int pre[N],map[N][N];
int minlen[N];//minlen[i] represents min length from s to i
int pathmin[N];//min flow in this path from i to t
queue&lt;int&gt;Q;

int n,m,s,t;

void init(int s)
{
	memset(pre,0,sizeof(pre));
	for(int i=0;i&lt;=n;i++)
		minlen[i]=pathmin[i]=INF;
	minlen[s]=0;
}

bool bfs(int s,int t)
{
	init(s);
	//push start node
	Q.push(s);
	while(!Q.empty())
	{
		int now=Q.front();
		Q.pop();
		for(int i=1;i&lt;=n;i++)
		{
			if(map[now][i]!=0&amp;&amp;minlen[now]+map[now][i]&lt;minlen[i])
			{
				minlen[i]=minlen[now]+map[now][i];
				pre[i]=now;
				pathmin[i]=min(pathmin[now],map[now][i]);
				Q.push(i);
			}
		}
	}
	if(minlen[n]==INF)
		return false;
	return true;
}

int max_flow(int s,int t)
{
	int res=0;
	while(bfs(s,t))//if can find an augment road
	{
		int minflow=pathmin[n];//minimal flow in the path
		int point=t;//calculate from end point t to start point s
		while(point!=s)
		{
			int prep=pre[point];
			map[prep][point]-=minflow;//positive road -= flow
			map[point][prep]+=minflow;//nagative road+= flow
			point=prep;
		}
		res+=minflow;
	}
	return res;
}

int main()
{
	int i,j;
	int a,b,c;
	while(scanf("%d%d",&amp;m,&amp;n)!=EOF)
	{
		memset(map,0,sizeof(map));
		for(i=0;i&lt;m;i++)
		{
			cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
			map[a][b]+=c;
		}
		s=1;
		t=n;
		cout&lt;&lt;max_flow(s,t)&lt;&lt;endl;
	}
	return 0;
}