Connect themYou have n computers numbered from 1 to n and you want to connect them to make a small local area network (LAN). All connections are two-way (that is connecting computers i and j is the same as connecting computers j and i). The cost of connecting computer i and computer j is cij. You cannot connect some pairs of computers due to some particular reasons. You want to connect them so that every computer connects to any other one directly or indirectly and you also want to pay as little as possible. 


   Given n and each cij , find the cheapest way to connect computers. 


   


   Input


   There are multiple test cases. The first line of input contains an integer T (T &lt;= 100), indicating the number of test cases. Then T test cases follow. 


   The first line of each test case contains an integer n (1 &lt; n &lt;= 100). Then n lines follow, each of which contains n integers separated by a space. The j-th integer of the i-th line in these n lines is cij, indicating the cost of connecting computers i and j (cij = 0 means that you cannot connect them). 0 &lt;= cij &lt;= 60000, cij = cji, cii = 0, 1 &lt;= i, j &lt;= n. 


   Output


   For each test case, if you can connect the computers together, output the method in in the following fomat:


   i1 j1 i1 j1 ...... 


   where ik ik (k &gt;= 1) are the identification numbers of the two computers to be connected. All the integers must be separated by a space and there must be no extra space at the end of the line. If there are multiple solutions, output the lexicographically smallest one (see hints for the definition of "lexicography small") If you cannot connect them, just output "-1" in the line. 


   Sample Input


   


   2
3
0 2 3
2 0 5
3 5 0
2
0 0
0 0



   


   Sample Output


   


   1 2 1 3
-1


   


   Hints:A solution A is a line of p integers: a1, a2, ...ap.Another solution B different from A is a line of q integers: b1, b2, ...bq.A is lexicographically smaller than B if and only if:(1) there exists a positive integer r (r &lt;= p, r &lt;= q) such that ai = bi for all 0 &lt; i &lt; r and ar &lt; br OR(2) p &lt; q and ai = bi for all 0 &lt; i &lt;= p


   


   


   #include&lt;iostream&gt;
using namespace std;
#define MAXM 10050
#define M    110
#define INF 99999999

int father[MAXM],n;
int from[M],to[M];

struct edges
{
	int start,end;
	int len;
}edge[MAXM];

struct result
{
	int from;
	int to;
}res[MAXM];

int comp(const void *a,const void *b)
{
	struct edges *aa=(edges*) a;
	struct edges *bb=(edges*) b;
	if(aa-&gt;len!=bb-&gt;len)
		return aa-&gt;len-bb-&gt;len;
	else if(aa-&gt;start!=bb-&gt;start)
		return aa-&gt;start-bb-&gt;start;
	else
		return aa-&gt;end-bb-&gt;end;
}

int cmp(const void *a,const void *b)
{
	struct result *aa=(result*) a;
	struct result *bb=(result*) b;
	if(aa-&gt;from!=bb-&gt;from)
		return aa-&gt;from-bb-&gt;from;
	else
		return aa-&gt;to-bb-&gt;to;
}


int cha(int x)
{
	if(x==father[x])
		return x;
	father[x]=cha(father[x]);
	return father[x];
}

int bing(int x,int y)
{
	father[cha(x)]=cha(y);
	return 0;
}
int main()
{
	int cases,k,j,x,y,z;
	scanf("%d",&amp;cases);
	memset(from,0,sizeof(from));
	memset(to,0,sizeof(to));
	while(cases--)
	{
		scanf("%d",&amp;n);
		int i,ans=0;
		for(i=0;i&lt;n*n;i++)
		{
			edge[i].end=0;
			edge[i].start=0;
			edge[i].len=0;
		}
		for(i=0;i&lt;=n;i++)
			father[i]=i;
		k=0;
		for(i=0;i&lt;n;i++)
		{
			for(j=0;j&lt;n;j++)
			{
				edge[k].start=i;
				edge[k].end=j;
				scanf("%d",&amp;edge[k].len);
				if(edge[k].len==0)
					edge[k].len=INF;
				k++;
			}
		}
		qsort(edge,k,sizeof(edge[0]),comp);
		int t1=0,flag=1;
		for(i=0;i&lt;n*n;i++)
		{
			x=edge[i].start;
			y=edge[i].end;
			z=edge[i].len;
			if(cha(x)!=cha(y))
			{
				ans+=z;
				res[t1].from=x+1;
				res[t1++].to=y+1;
				bing(x,y);
			}
		}
		if(ans&lt;INF)
		{
			flag=0;
		}
		else
		{
			cout&lt;&lt;-1&lt;&lt;endl;
			continue;
		}

		qsort(res,t1,sizeof(res[0]),cmp);
		if(!flag)
		{
			cout&lt;&lt;res[0].from&lt;&lt;" "&lt;&lt;res[0].to;
			for(i=1;i&lt;t1;i++)
				cout&lt;&lt;" "&lt;&lt;res[i].from&lt;&lt;" "&lt;&lt;res[i].to;
			cout&lt;&lt;endl;
		}
	}
	return 0;
}