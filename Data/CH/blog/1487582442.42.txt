Connect the CitiesProblem Description

In 2100, since the sea level rise, most of the cities disappear. Though some survived cities are still connected with others, but most of them become disconnected. The government wants to build some roads to connect all of these cities again, but they don&rsquo;t want to take too much money.




   

Input

The first line contains the number of test cases.Each test case starts with three integers: n, m and k. n (3 &lt;= n &lt;=500) stands for the number of survived cities, m (0 &lt;= m &lt;= 25000) stands for the number of roads you can choose to connect the cities and k (0 &lt;= k &lt;= 100) stands for the number of still connected cities.To make it easy, the cities are signed from 1 to n.Then follow m lines, each contains three integers p, q and c (0 &lt;= c &lt;= 1000), means it takes c to connect p and q.Then follow k lines, each line starts with an integer t (2 &lt;= t &lt;= n) stands for the number of this connected cities. Then t integers follow stands for the id of these cities.




   

Output

For each case, output the least money you need to take, if it&rsquo;s impossible, just output -1. 




   

Sample Input



   1
6 4 3
1 4 2
2 6 1
2 3 5
3 4 33
2 1 2
2 1 3
3 4 5 6






   

Sample Output



   1
这道题提醒我们！！！
交题要稳重，TLE了好几次！
一定要看清题目的数据量：(3 &lt;= n &lt;=500)  (0 &lt;= m &lt;= 25000) 
但是最小生成树加进去n-1条边就行！
#include&lt;iostream&gt;
using namespace std;

#define M 25001

int g[M][4];
int father[M],n,m,k,a,b[M],c,r,ans,edge;

int comp(const void *a,const void *b)
{
    return *((int *)a+3)-*((int *)b+3);
}

int cha(int x)
{
    if(x==father[x])
 return x;
    father[x]=cha(father[x]);
    return father[x];
}

int bing(int x,int y)
{
    father[cha(x)]=cha(y);
    return 0;
}

void init()
{
    int i,j;
    edge=0;
    memset(g,0,sizeof(g));
    scanf("%d%d%d",&amp;n,&amp;m,&amp;k);
    for(i=1;i&lt;=n;i++)
    {
 father[i]=i;
    }
    for(i=0;i&lt;m;i++)
    {
 scanf("%d%d%d",&amp;g[i][1],&amp;g[i][2],&amp;g[i][3]);
    }
    for(i=0;i&lt;k;i++)
    {
 scanf("%d",&amp;a);
 for(j=0;j&lt;a;j++)
 {
     scanf("%d",&amp;b[j]);
     if(j!=0&amp;&amp;cha(b[j])!=cha(b[j-1]))
     {
  bing(b[j],b[j-1]);
  edge++;
     }
 }
    }
}

int main()
{
    int i,x,y,z,cases;
    scanf("%d",&amp;cases);
    while(cases--)
    {
 init();
 ans=0;
 qsort(g,m,4*sizeof(int),comp);
 for(i=0;i&lt;m;i++)
 {
     if(edge&gt;=n-1)
  break;
     x=g[i][1];
     y=g[i][2];
     z=g[i][3];
     if(cha(x)!=cha(y))
     {
  ans+=z;
  edge++;
  bing(x,y);
     }
 }
 if(edge==n-1)
     printf("%d/n",ans);
 else
     printf("-1/n");
    }
    return 0;
}