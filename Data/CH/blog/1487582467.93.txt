PreCreateWindow函数， PreSubClassWindow函数这两个函数是MFC的基类CWnd两个很重要的虚函数，万恶的MFC总是让人很烦恼。


classCWnd:publicCCmdTarget

{



public:



virtualBOOLPreCreateWindow(CREATESTRUCT&amp;cs);

virtualvoidPreSubclassWindow();

BOOLSubclassWindow(HWNDhWnd);



};

　

   　父类中的虚拟函数是可以被子类重新实现的，以实现多态。一般基类会有一个默认的实现。


    msdn对这两个函数的定义。

　　PreCreateWindow:
　　Called by the framework before the creation of the Windows window
　　attached to this CWnd object.

   　　(译:在窗口被创建并attach到this指针所指的CWnd对象之前，被framework调用)


   

　　PreSubclassWindow:
　　This member function is called by the framework to allow other necessary

   　　subclassing to occur before the window is subclassed.


   　　(译:在window被subclassed之前被framework调用，用来允许其它必要的subclassing发生)


   




   虽然我已有译文，但还是让我对CWnd的attach和窗口的subclass作简单的解释吧！要理解attach，我们必须要知道一个C&#43;&#43;的CWnd对象和窗口句柄(window)的区别：窗口句柄是windows的系统级的概念，代表着一个具体的窗口的句柄，可以通过操作这个句柄来修改窗口的属性已经行为。对应sdk编程


   的HWND。


   而CWnd就是MFC用类对window所进行C&#43;&#43;封装。attach，就是在CWnd对象和窗口句柄建立一个关联。这样就可以用CWnd对象的接口来修改实际窗口的


   属性和行为。

　　好了，PreCreateWindow由framework在窗口创建前被调用，函数名也说明了这一点，Pre应该是previous的缩写，PreSubclassWindow由framework在subclass窗口前调用。 这段话说了等于没说，你可能还是不知道，什么时候该改写哪个函数。罗罗嗦嗦的作者，还是用代码说话吧！源码之前，了无秘密(候捷语)。我们就看看MFC中的这三个函数都是这样实现的吧！

BOOLCWnd::CreateEx(DWORDdwExStyle,LPCTSTRlpszClassName,

LPCTSTRlpszWindowName,DWORDdwStyle,

intx,inty,intnWidth,intnHeight,

HWNDhWndParent,HMENUnIDorHMenu,LPVOIDlpParam)

{

//allowmodificationofseveralcommoncreateparameters

CREATESTRUCTcs;

cs.dwExStyle=dwExStyle;

cs.lpszClass=lpszClassName;

cs.lpszName=lpszWindowName;

cs.style=dwStyle;

cs.x=x;

cs.y=y;

cs.cx=nWidth;

cs.cy=nHeight;

cs.hwndParent=hWndParent;

cs.hMenu=nIDorHMenu;

cs.hInstance=AfxGetInstanceHandle();

cs.lpCreateParams=lpParam;



if(!PreCreateWindow(cs))

{

PostNcDestroy();

returnFALSE;

}



AfxHookWindowCreate(this);

HWNDhWnd=::CreateWindowEx(cs.dwExStyle,cs.lpszClass,

cs.lpszName,cs.style,cs.x,cs.y,cs.cx,cs.cy,

cs.hwndParent,cs.hMenu,cs.hInstance,cs.lpCreateParams);





returnTRUE;

}



//forchildwindows

BOOLCWnd::PreCreateWindow(CREATESTRUCT&amp;cs)

{

if(cs.lpszClass==NULL)

{

//makesurethedefaultwindowclassisregistered

VERIFY(AfxDeferRegisterClass(AFX_WND_REG));



//noWNDCLASSprovided-usechildwindowdefault

ASSERT(cs.style&amp;WS_CHILD);

cs.lpszClass=_afxWnd;

}

returnTRUE;

}

　　CWnd::CreateEx先设定cs(CREATESTRUCT)，在调用真正的窗口创建函数::CreateWindowEx之前，调用了CWnd::PreCreateWindow函数，并把参数cs以引用的方式传递了进去。而CWnd的PreCreateWindow函数也只是给cs.lpszClass赋&#20540;而已。毕竟，窗口创建函数CWnd::CreateEx的诸多参数中，并没有哪个指定了所要创建窗口的窗口类，而这又是不可缺少的(请参考&lt;&lt;windows程序设计&gt;&gt;第三章)。所以当你需要修改窗口的大小、风&#26684;、窗口所属的窗口类等cs成员变量时，要改写PreCreateWindow函数。

//FromVSInstallPathVC98MFCSRCWINCORE.CPP

BOOLCWnd::SubclassWindow(HWNDhWnd)

{

if(!Attach(hWnd))

returnFALSE;



//allowanyothersubclassingtooccur

PreSubclassWindow();



//nowhookintotheAFXWndProc

WNDPROC*lplpfn=GetSuperWndProcAddr();

WNDPROColdWndProc=(WNDPROC)::SetWindowLong(hWnd,GWL_WNDPROC,

(DWORD)AfxGetAfxWndProc());

ASSERT(oldWndProc!=(WNDPROC)AfxGetAfxWndProc());



if(*lplpfn==NULL)

*lplpfn=oldWndProc;//thefirstcontrolofthattypecreated

#ifdef_DEBUG

elseif(*lplpfn!=oldWndProc)

{



::SetWindowLong(hWnd,GWL_WNDPROC,(DWORD)oldWndProc);

}

#endif



returnTRUE;

}



voidCWnd::PreSubclassWindow()

{

//nodefaultprocessing

}

　　CWnd::SubclassWindow先调用函数Attach(hWnd)让CWnd对象和hWnd所指的窗口发生关联。接着在用::SetWindowLong修改窗口过程(subclass)前，调用了PreSubclassWindow。CWnd::PreSubclassWindow则是什么都没有做。
　　在CWnd的实现中，除了CWnd::SubclassWindow会调用PreSubclassWindow外，还有一处。上面所列函数CreateEx的代码，其中调用了一个AfxHookWindowCreate函数，见下面代码：

//FromVSInstallPathVC98MFCSRCWINCORE.CPP

BOOLCWnd::CreateEx()

{

//allowmodificationofseveralcommoncreateparameters





if(!PreCreateWindow(cs))

{

PostNcDestroy();

returnFALSE;

}



AfxHookWindowCreate(this);

HWNDhWnd=::CreateWindowEx(cs.dwExStyle,cs.lpszClass,

cs.lpszName,cs.style,cs.x,cs.y,cs.cx,cs.cy,

cs.hwndParent,cs.hMenu,cs.hInstance,cs.lpCreateParams);





returnTRUE;

}

　　接着察看AfxHookWindowCreate的代码：



//FromVSInstallPathVC98MFCSRCWINCORE.CPP

voidAFXAPIAfxHookWindowCreate(CWnd*pWnd)

{





if(pThreadState-&gt;m_hHookOldCbtFilter==NULL)

{

pThreadState-&gt;m_hHookOldCbtFilter=::SetWindowsHookEx(WH_CBT,

_AfxCbtFilterHook,NULL,::GetCurrentThreadId());

if(pThreadState-&gt;m_hHookOldCbtFilter==NULL)

AfxThrowMemoryException();

}



}



　　其主要作用的::SetWindowsHookEx函数用于设置一个挂钩函数(Hook函数)_AfxCbtFilterHook，每当Windows产生一个窗口时(还有许多其它类&#20284;，请参考&lt;&lt;深入浅出MFC&gt;&gt;第9章，563页)，就会调用你设定的Hook函数。
　　这样设定完成后，回到CWnd::CreateEx函数中，执行::CreateWindowEx进行窗口创建，窗口一产生，就会调用上面设定的Hook函数_AfxCbtFilterHook。而正是在_AfxCbtFilterHook中对函数PreSubclassWindow进行了第二次调用。见如下代码：

//FromVSInstallPathVC98MFCSRCWINCORE.CPP

/**//////////////////////////////////////////////////////////////////////////////

//Windowcreationhooks



LRESULTCALLBACK

_AfxCbtFilterHook(intcode,WPARAMwParam,LPARAMlParam)

{





//connecttheHWNDtopWndInit

pWndInit-&gt;Attach(hWnd);

//allowothersubclassingtooccurfirst

pWndInit-&gt;PreSubclassWindow();



{

//subclassthewindowwithstandardAfxWndProc

oldWndProc=(WNDPROC)SetWindowLong(hWnd,GWL_WNDPROC,(DWORD)afxWndProc);

ASSERT(oldWndProc!=NULL);

*pOldWndProc=oldWndProc;

}



}


   　　也在调用函数SetWindowLong进行窗口subclass前调用了PreSubclassWindow.