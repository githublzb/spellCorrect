浙大计算机研究生复试上机考试-2009年http://acm.hdu.edu.cn/showproblem.php?pid=3782


   
XXX定律


   





[cpp]view
 plaincopy









#include&quot;iostream&quot;
usingnamespacestd;
intmain()
{
intn;
while(cin&gt;&gt;n&amp;&amp;n!=0)
{
intcnt=0;
while(n!=1)
{
n=n%2?(n*3&#43;1)&gt;&gt;1:n&gt;&gt;1;
cnt&#43;&#43;;
}
printf(&quot;%d\n&quot;,cnt);
}
}




ZOJ


   


   





[cpp]view
 plaincopy









#include&quot;iostream&quot;
#include&quot;string&quot;
usingnamespacestd;

intmain()
{
stringstr;
while(cin&gt;&gt;str&amp;&amp;str!=&quot;E&quot;)
{
inti;
intcount[26];
memset(count,0,sizeof(int)*26);
for(i=0;i&lt;str.length();i&#43;&#43;)
count[str[i]-'A']&#43;&#43;;
intz='Z'-'A',o='O'-'A',j='J'-'A';
while(count[z]&gt;0||count[o]&gt;0||count[j]&gt;0)
{
if(count[z]--&gt;0)
printf(&quot;Z&quot;);
if(count[o]--&gt;0)
printf(&quot;O&quot;);
if(count[j]--&gt;0)
printf(&quot;J&quot;);
}
printf(&quot;\n&quot;);
}
}




继续xxx定律


   


   





[cpp]view
 plaincopy









#include&quot;iostream&quot;
usingnamespacestd;
inta[550];
boolnum[250000];//(x*3&#43;1)/2======nummeanscover

intmain()
{
intn,i,j;
while(scanf(&quot;%d&quot;,&amp;n)!=EOF&amp;&amp;n!=0)
{
memset(num,false,sizeof(bool)*1010);
for(i=0;i&lt;n;i&#43;&#43;)
{
scanf(&quot;%d&quot;,&amp;a[i]);
inttemp=a[i];
while(!num[a[i]]&amp;&amp;temp!=1)
{
temp=temp%2?(temp*3&#43;1)&gt;&gt;1:temp&gt;&gt;1;
num[temp]=true;
}
}
i=n-1;
while(num[a[i]])
i--;
printf(&quot;%d&quot;,a[i]);
//num[a[i]]=true;%&gt;_&lt;%我还以为出现的关键数不该再出现了，没想到不用特判
for(i=i-1;i&gt;=0;i--)
{
if(!num[a[i]])
printf(&quot;%d&quot;,a[i]);
//num[a[i]]=true;
}
printf(&quot;\n&quot;);
}
}




找大富翁


   


   





[cpp]view
 plaincopy









/************************************************************************/
/*bubble-437ms*/
/************************************************************************//
#include&quot;iostream&quot;
usingnamespacestd;
inta[100100];
voidswap(inti,intj)
{
a[i]=a[i]^a[j];
a[j]=a[i]^a[j];
a[i]=a[i]^a[j];
}
intmain()
{
intn,m,i,j;
while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF&amp;&amp;!(n==0&amp;&amp;m==0))
{
if(n&lt;m)
m=n;
for(i=0;i&lt;n;i&#43;&#43;)
scanf(&quot;%d&quot;,&amp;a[i]);
for(i=1;i&lt;=m;i&#43;&#43;)
{
for(j=0;j&lt;n-1;j&#43;&#43;)
if(a[j]&gt;a[j&#43;1])
swap(j,j&#43;1);
}
for(i=1;i&lt;m;i&#43;&#43;)
printf(&quot;%d&quot;,a[n-i]);
printf(&quot;%d\n&quot;,a[n-m]);
}
}

/************************************************************************/
/*sort-468ms
#include&quot;iostream&quot;
#include&quot;algorithm&quot;
usingnamespacestd;
inta[100100];
voidswap(inti,intj)
{
a[i]=a[i]^a[j];
a[j]=a[i]^a[j];
a[i]=a[i]^a[j];
}
intmain()
{
intn,m,i,j;
while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF&amp;&amp;!(n==0&amp;&amp;m==0))
{
if(n&lt;m)
m=n;
for(i=0;i&lt;n;i&#43;&#43;)
scanf(&quot;%d&quot;,&amp;a[i]);
sort(a,a&#43;n);
for(i=1;i&lt;m;i&#43;&#43;)
printf(&quot;%d&quot;,a[n-i]);
printf(&quot;%d\n&quot;,a[n-m]);
}
}*/
/************************************************************************//


找出直系亲属

   


   







[cpp]view
 plaincopy









#include&quot;iostream&quot;
#include&quot;string&quot;
#include&quot;algorithm&quot;
usingnamespacestd;
#defineINF1000000
#definemin(a,b)a&lt;b?a:b
chartree['Z'&#43;10][2];

intDfs(chara,charb,intlevel)
{
//分别从a和b往下找
if(a=='-'||tree[a][0]=='-'&amp;&amp;tree[a][1]=='-')
returnINF;
if(tree[a][0]==b||tree[a][1]==b)
returnlevel&#43;1;
intleft=Dfs(tree[a][0],b,level&#43;1);
intright=Dfs(tree[a][1],b,level&#43;1);
returnmin(left,right);
}
intmain()
{
stringstr;
intn,m,i,j;
while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF&amp;&amp;!(n==0&amp;&amp;m==0))
{
memset(tree,'-',sizeof(char)*2*('Z'&#43;10));
for(i=0;i&lt;n;i&#43;&#43;)
{
cin&gt;&gt;str;
tree[str[0]][0]=str[1];
tree[str[0]][1]=str[2];
}
for(i=0;i&lt;m;i&#43;&#43;)
{
cin&gt;&gt;str;
intlevel1=Dfs(str[0],str[1],0);
intlevel2=Dfs(str[1],str[0],0);
intlevel=level1&gt;=INF?-level2:level1;
if(abs(level)&gt;=INF)
{
printf(&quot;-\n&quot;);
continue;
}
while(level&#43;&#43;&lt;-2)
printf(&quot;great-&quot;);
level--;
if(level==-1)
printf(&quot;parent\n&quot;);
elseif(level==-2)
printf(&quot;grandparent\n&quot;);

while(level--&gt;2)
printf(&quot;great-&quot;);
level&#43;&#43;;
if(level==2)
printf(&quot;grandchild\n&quot;);
elseif(level==1)
printf(&quot;child\n&quot;);
}
}
}