设计总结2，关于template method 或者algorithm skeleton的一个应用在程序中，经常发现这样的重复代码，就是需要打开文件然后循环读取文件的每一行进行相关超做，我们知道重复代码就是bad smell的一种。那么如何复用这个部分呢？换句话说，是否可以在应用的角度上完全不需要考虑文件读写的过程呢，我们把文件文件读的代码抽象出来，让子类实现do_after_read_line接口来做实际的读写后的处理，这样实现了重用。代码如下#ifndef FILE_READER#define FILE_READER#include &lt;iostream&gt;#include &lt;fstream&gt;#include &quot;assert.h&quot;namespace utility{ class file_reader { protected: //子类可以不实现 virtual void before_read() {} //子类可以不实现 virtual void after_read() {} //子类必须实现 virtual void do_after_read_line(char * line_buffer)=0; void read_file(const char* p_file) { assert( NULL != p_file ); FILE *fp ; before_read(); fp = fopen(p_file, &quot;r&quot;); if( NULL == fp ) { WEBSEARCH_ERROR((LM_TRACE,&quot;%s is cannot be opened./n&quot;,p_file )); return; } char line_buffer[1024]; memset(line_buffer,0x0,1024); while( fgets(line_buffer, 1024, fp) ) { do_after_read_line(line_buffer); memset(line_buffer,0x0,1024); } fclose(fp); after_read(); return ; } };}#endif