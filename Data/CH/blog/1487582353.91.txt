hdu 3794 浙大计算机研究生保研复试上机考试-2011年Magic Coupon
Time Limit: 2000/1000 MS (Java/Others)Memory Limit: 32768/32768 K (Java/Others)

Total Submission(s): 570Accepted Submission(s): 130




Problem Description


The magic shop in Mars is offering some magic coupons. Each coupon has an integer N printed on it, meaning that when you use this coupon with a product, you may get N times the value of that product back! What is more, the shop also offers some bonus product
 for free. However, if you apply a coupon with a positive N to this bonus product, you will have to pay the shop N times the value of the bonus product... but hey, magically, they have some coupons with negative N's!

For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M$) where a negative value corresponds to a bonus product. You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; coupon
 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back. On the other hand, if you apply coupon 3 to product 4, you will have to pay M$12 to the shop.

Each coupon and each product may be selected at most once. Your task is to get as much money back as possible.






Input


Your program must read test cases from standard input.

The input file consists of several test cases. For each case, the first line contains the number of coupons NC, followed by a line with NC coupon integers. Then the next line contains the number of products NP, followed by a line with NP product values. Here
 1&lt;= NC, NP &lt;= 10^6, and it is guaranteed that all the numbers will not exceed 10^7.

The input is finished by a negative NC.








Output


For each test case, your program must output to standard output. Simply print in a line the maximum amount of money you can get back.






Sample Input



   4
1 2 4 -1
4
7 6 -2 -3
4
3 2 6 1
3 
2 6 3
-1








Sample Output



   43
49








Source


浙大计算机研究生保研复试上机考试-2011年









   #include &quot;iostream&quot;
#include &quot;stdio.h&quot;
#include &quot;math.h&quot;
#include &quot;vector&quot;
#include &quot;queue&quot;
#include &quot;memory.h&quot;
#include &quot;algorithm&quot;
#include &quot;string&quot;
using namespace std;
#define N 1000005
__int64 a1[N];
__int64 a2[N];

int main()
{
    int n1,n2,i,j;
    while(scanf(&quot;%d&quot;,&amp;n1)!=EOF&amp;&amp;n1&gt;=0)
    {
 for(i=0;i&lt;n1;i++)
     scanf(&quot;%I64d&quot;,&amp;a1[i]);
 scanf(&quot;%d&quot;,&amp;n2);
 for(i=0;i&lt;n2;i++)
     scanf(&quot;%I64d&quot;,&amp;a2[i]);
 sort(a1,a1+n1);//或者降序可以用sort(a1,a1+n1,greater&lt;int&gt;()) 
 sort(a2,a2+n2);
 i=0;
 __int64 sum=0;
 while(a1[i]&lt;0&amp;&amp;a2[i]&lt;0&amp;&amp;i&lt;n1&amp;&amp;i&lt;n2)
     sum+=a1[i]*a2[i++];
 i=n1-1,j=n2-1;
 while(a1[i]&gt;0&amp;&amp;a2[j]&gt;0&amp;&amp;i&gt;=0&amp;&amp;j&gt;=0)
     sum+=a1[i--]*a2[j--];
 printf(&quot;%I64d\n&quot;,sum);
    }
}