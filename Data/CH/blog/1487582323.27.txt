程序员面试——走台阶问题走台阶版本1：


   题目：一个台阶总共有n级，如果一次可以跳1级，也可以跳2级。求总共有多少总跳法，并分析算法的时间复杂度。




   源自http://zhedahht.blog.163.com/blog/static/25411174200731844235261/


   递归：f(n)=f(n-1)&#43;f(n-2)


   其中f(0)=f(1)=1;




   对最后一步分情况讨论：


   走一步为f(n-1)种方法，走两步为f(n-2)种方法。


   算法复杂度：O(n)




   或者采用斐波那契数列通项公式直接计算：F(n)=（√5/5)*{[(1&#43;√5)/2]^n - [(1-√5)/2]^n}


   




   走台阶版本2：


   题目：一个台阶总共有n级，如果一次可以跳1-n级。求总共有多少总跳法，并分析算法的时间复杂度。




   递归：f(n)=f(n-1)&#43;f(n-2)&#43;...&#43;f(1)&#43;f(0)=2*f(n-1)=2^(n-1)


   对最后一步分情况讨论：


   最后一步走i个台阶有f(n-i)种方法，所以


   （1）f(n)=f(n-1)&#43;f(n-2)&#43;...&#43;f(1)&#43;f(0)


   （2）f(n-1)=f(n-2)&#43;f(n-3)&#43;...&#43;f(1)&#43;f(0)


   （1）-（2）得f(n)=2*f(n-1)


   有因为f(1)=1, 所以f(n)=2^(n-1)




   算法复杂度：O(1)