关于内存空洞的一个解释（转自我在水木社区的一个回帖）发信人: pennyliang (pennyliang), 信区: SearchEngineTech标 题: Re: 转自梁总blog发信站: 水木社区 (Thu Jul 2 21:16:22 2009), 站内


   内存碎片也叫内存空洞吧。


   比如glibc管理的内存


   --------&mdash;&mdash;|-----------|-------------|---------------堆顶使用中内存A 释放的内存B 使用中内存C 释放的内存D


   glibc管理的内存唯一释放的条件是堆顶存在128k（M_TRIM_THRESHOLD）或以上的空闲区时才会释放，比如只有D才有被归还系统的可能，B就老老实实成为内存空洞，虽然未来的分配还能用到，但释放不掉。


   而有些32位条件下工作很好的程序，但是到64位后，这个阈值变大的原因（而物理内存其实并没有增大很多），因为总是到不了这个threshold，而总是有新的分配摞上来，这样就失去了释放的机会。


   一般来说，通常的经验是（1）glibc管理的内存绝大多数情况不会释放。 因此编程时如果是小内存分配要尽快使用，尽快用完，尽快释放，不要停留，否则一直摞着，线性地址后面的就形成了空洞。（2）如果是想内存总在控制中，可以分配大内存，自行管理释放和分配。不用的时候可以释放地很干净（3）不要分配很小的内存比如几个字节，因为一次malloc至少分配16个字节，如果每次分配都很小，就太亏了。（4）降低M_MMAP_THRESHOLD，可以让更多的分配走mmap，避免brk得总总问题，特别是64位机器的情况下。（5）降低M_TRIM_THRESOLD,让堆顶的空闲内存更容易释放。


   以上（4）（5）都不可避免会增加系统调用的机会，使用中需要慎重。