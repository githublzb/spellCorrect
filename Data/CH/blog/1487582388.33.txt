hdu 3666 模板[求差分约束是否有解]THE MATRIX PROBLEM

   Time Limit: 4000/2000 MS (Java/Others)Memory Limit: 32768/32768 K (Java/Others)Total Submission(s): 787Accepted Submission(s): 168

Problem Description

You have been given a matrix CN*M, each element E of CN*M is positive and no more than 1000, The problem is that if there exist N numbers a1, a2, &hellip; an and M numbers b1, b2, &hellip;, bm, which satisfies that each elements in row-i multiplied with ai and each elements in column-j divided by bj, after this operation every element in this matrix is between L and U, L indicates the lowerbound and U indicates the upperbound of these elements.




   

Input

There are several test cases. You should process to the end of file.Each case includes two parts, in part 1, there are four integers in one line, N,M,L,U, indicating the matrix has N rows and M columns, L is the lowerbound and U is the upperbound (1&lt;=N、M&lt;=400,1&lt;=L&lt;=U&lt;=10000). In part 2, there are N lines, each line includes M integers, and they are the elements of the matrix.




   

Output

If there is a solution print "YES", else print "NO".




   

Sample Input



   3 3 1 6
2 3 4
8 2 6
5 2 9






   

Sample Output



   YES
 






   

Source

2010 Asia Regional Harbin 







注意：

1.原题列出方程来是ai/bj的形式，转化到ai-bj的形式的方法：求log！

2.判断负环只要sqrt(N)次就好了，开始求N次超时

#include&lt;iostream&gt;
#include&lt;cmath&gt;
#include&lt;queue&gt;
#define MAXN 810
#define MAXM 320010
using namespace std;
bool inq[MAXN];
int cnt[MAXN],a;
int head[MAXN],V[MAXM],next[MAXM];
double W[MAXM],dis[MAXN];
int m,N,M;
void addEdge(int u,int v,double w)
{
	V[m] = v;
	W[m] = w;
	next[m] = head[u];
	head[u] = m++;
}
void buildGraph(double l,double r)
{
	m = 0;
	memset(head,-1,sizeof(head));
	for(int i=0;i&lt;N;i++)
			for(int j=0;j&lt;M;j++)
			{
				scanf("%d",&amp;a);
				
				addEdge(j+N,i,log(r/a));
				addEdge(i,j+N,-log(l/a));
			}
}
bool SPFA()
{
	int i;
	queue&lt;int&gt; q;
	for(i=0;i&lt;=N+M-1;i++)
		inq[i]=true;
	for(i=0;i&lt;=N+M-1;i++)
		dis[i]=10000000;
	dis[0]=0;
	memset(cnt,0,sizeof(cnt));
	for(i = 0;i &lt;= N+M-1;++i)
		q.push(i);
	while(!q.empty())
	{
		int u = q.front();
		q.pop();
		inq[u] = 0;
		for(int e = head[u];e != -1;e = next[e])
		{
			if(dis[u] + W[e] &lt; dis[V[e]])
			{
				dis[V[e]] = dis[u] + W[e];
				if(!inq[V[e]])
				{
					q.push(V[e]);
					inq[V[e]] = 1;
					if(++cnt[V[e]] &gt; sqrt((N+M-1)*1.0)+1)	
						return 0;
				}
			}
		}
	}
	return 1;//有解
}
int main()
{
	double l,r;
    while(scanf("%d%d%lf%lf",&amp;N,&amp;M,&amp;l,&amp;r)!=EOF)
	{
		buildGraph(l,r);
		if(SPFA())	printf("YES/n");
		else printf("NO/n");
	}
    return 0;
}