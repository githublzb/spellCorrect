堆和栈的区别在bbs上，堆与栈的区分问题，&#20284;乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。
 首先，我们举一个例子：
 void f() { int* p=new int[5]; }
 这条短短的一句话就包含了堆与栈，看到new，我们首先就应该想到，我们分配了一块堆内存，那么指针p呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针p。在程序会先确定在堆中分配内存的大小，然后调用operator new分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：
 00401028 push 14h
 0040102A call operator new (00401060)
 0040102F add esp,4
 00401032 mov dword ptr [ebp-8],eax
 00401035 mov eax,dword ptr [ebp-8]
 00401038 mov dword ptr [ebp-4],eax
 这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是delete p么？澳，错了，应该是delete []p，这是为了告诉编译器：我删除的是一个数组，VC6就会根据相应的Cookie信息去进行释放内存的工作。
 好了，我们回到我们的主题：堆和栈究竟有什么区别？
 主要的区别由以下几点：
 1、管理方式不同；
 2、空间大小不同；
 3、能否产生碎片不同；
 4、生长方向不同；
 5、分配方式不同；
 6、分配效率不同；
 管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。
 空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：
 打开工程，依次操作菜单如下：Project-&gt;Setting-&gt;Link，在Category 中选中Output，然后在Reserve中设定堆栈的最大&#20540;和commit。
注意：reserve最小&#20540;为4Byte；commit是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的&#20540;，可能增加内存的开销和启动时间。
 碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。
 生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。
 分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。
 分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C&#43;&#43;函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。
 从这里我们可以看到，堆和栈相比，由于大量new/delete的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。
 虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。
 无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候debug可是相当困难的：）
 对了，还有一件事，如果有人把堆栈合起来说，那它的意思是栈，可不是堆，呵呵，清楚了？


   



//================================================================================================//


   




   一、预备知识—程序的内存分配

 一个由C/C&#43;&#43;编译的程序占用的内存分为以下几个部分

 1、栈区（stack）— 由编译器自动分配释放 ，存放函数的参数&#20540;，局部变量的&#20540;等。其

 操作方式类&#20284;于数据结构中的栈。

 2、堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回

 收 。注意它与数据结构中的堆是两回事，分配方式倒是类&#20284;于链表，呵呵。

 3、全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的

 全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另

 一块区域。 - 程序结束后由系统释放。

 4、文字常量区 —常量字符串就是放在这里的。 程序结束后由系统释放

 5、程序代码区—存放函数体的二进制代码。





 二、例子程序

 这是一个前辈写的，非常详细

 //main.cpp

 int a = 0; 全局初始化区

 char *p1; 全局未初始化区

 main()

 {

 int b; 栈

 char s[] = &quot;abc&quot;; 栈

 char *p2; 栈

 char *p3 = &quot;123456&quot;; 123456/0在常量区，p3在栈上。

 static int c =0； 全局（静态）初始化区

 p1 = (char *)malloc(10);

 p2 = (char *)malloc(20);

 分配得来得10和20字节的区域就在堆区。

 strcpy(p1, &quot;123456&quot;); 123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;

 优化成一个地方。

 }





 二、堆和栈的理论知识

 2.1申请方式

 stack:

 由系统自动分配。 例如，声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空

 间

 heap:

 需要程序员自己申请，并指明大小，在c中malloc函数

 如p1 = (char *)malloc(10);

 在C&#43;&#43;中用new运算符

 如p2 = new char[10];

 但是注意p1、p2本身是在栈中的。





 2.2

 申请后系统的响应

 栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢

 出。

 堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，

 会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表

 中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的

 首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。

 另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部

 分重新放入空闲链表中。



 2.3申请大小的限制

 栈：在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意

 思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是2M（也有

 的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将

 提示overflow。因此，能从栈获得的空间较小。

 堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储

 的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小

 受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。







 2.4申请效率的比较：

 栈由系统自动分配，速度较快。但程序员是无法控制的。

 堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.

 另外，在WINDOWS下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈是

 直接在进程的地址空间中保留一块内存，虽然用起来最不方便。但是速度快，也最灵活。





 2.5堆和栈中的存储内容

 栈： 在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可

 执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈

 的，然后是函数中的局部变量。注意静态变量是不入栈的。

 当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地

 址，也就是主函数中的下一条指令，程序由该点继续运行。

 堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排。



 2.6存取效率的比较



 char s1[] = &quot;aaaaaaaaaaaaaaa&quot;;

 char *s2 = &quot;bbbbbbbbbbbbbbbbb&quot;;

 aaaaaaaaaaa是在运行时刻赋&#20540;的；

 而bbbbbbbbbbb是在编译时就确定的；

 但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。

 比如：

 #include

 void main()

 {

 char a = 1;

 char c[] = &quot;1234567890&quot;;

 char *p =&quot;1234567890&quot;;

 a = c[1];

 a = p[1];

 return;

 }

 对应的汇编代码

 10: a = c[1];

 00401067 8A 4D F1 mov cl,byte ptr [ebp-0Fh]

 0040106A 88 4D FC mov byte ptr [ebp-4],cl

 11: a = p[1];

 0040106D 8B 55 EC mov edx,dword ptr [ebp-14h]

 00401070 8A 42 01 mov al,byte ptr [edx&#43;1]

 00401073 88 45 FC mov byte ptr [ebp-4],al

 第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针&#20540;读到

 edx中，再根据edx读取字符，显然慢了。





 2.7小结：

 堆和栈的区别可以用如下的比喻来看出：

 使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就

 走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自

 由度小。

 使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由



    度大。 (经典！) 


   




   




   //======================================================================================//


   总结：


   遇到栈溢出的问题最好先想想怎么优化算法，比如递归改为非递归之类的，递归一般都可以用队列和stack实现非递归的


   其次实在不行了，变量必须开这么大，那没办法，用堆吧（malloc,new），不够用它会从外存里找的，不像栈在内存里。


   



//======================================================================================//

//======================================================================================//

//======================================================================================//