Get Sauceacm zju 3305


   


   Get Sauce



   Time Limit: 5 Seconds  Memory Limit: 32768 KB 



   In order to celebrate the 8th anniversary of ZOJ, LCLL goes to a sauce factory to "Get Sauce". The factory has N kinds of materials. If we combine some of them, we will get a bottle of sauce. LCLL is a sauce genius, he knows about M ways to make the sauce with these materials. Now LCLL wants to get as many bottles of sauce as possible, but he can use each kind of material only once. How many bottles of sauce will LCLL take home at most? 


   Input


   The input file will contain multiple test cases. Each case contains two integers N and M(0 &lt;=N &lt;= 16, 0&lt;= M &lt;=50,000), then there are M lines, each line describe a way to make sauce like this: K a1,a2...aK where K(1&lt;=K&lt;=N) is the number of kinds of materials, ai is a number between[1,N] represents a kind of material this way needs. 


   Process to the end-of-file. 


   Output


   For each test case print a single line that contains the number of the bottles of sauce LCLL will get at most. 


   Sample Input


   5 3
2 1 2
2 2 3
2 3 4

5 2
1 1
4 1 2 3 4


   Sample Output


   2
1



   Author: CHAO, JiansongSource: ZOJ 8th Anniversary Contest


   


   #include &lt;iostream&gt;
using namespace std;
int dp[(1&lt;&lt;16)+5];
bool used[(1&lt;&lt;16)+5];
int m,n;
int max(int x,int y)
{
	return x&gt;y?x:y;
}
int dfs(int x)
{
	if(dp[x]==-1)
	{
		dp[x]=0;
		int i;
		for(i=x;i!=0;i=(i-1)&amp;x)
		{
			if(used[i])
				dp[x]=max(dp[x],dfs(x^i)+1);
		}
	}
	return dp[x];
}

int main()
{
	int i,j,k,tmp;
	while(scanf("%d%d",&amp;n,&amp;m)==2)
	{
		memset(dp,-1,sizeof(dp));
		memset(used,0,sizeof(used));
		for(i=0;i&lt;m;i++)
		{
			scanf("%d",&amp;k);
			{
				j=0;
				while(k--)
				{
					scanf("%d",&amp;tmp);
					j+=(1&lt;&lt;(tmp-1));
				}
				used[j]=1;
			}
		}
		printf("%d/n",dfs((1&lt;&lt;n)-1));
	}
	return 0;
}
 


   


   #include &lt;iostream&gt;

using namespace std;



int dp[(1&lt;&lt;16)+5];

bool used[(1&lt;&lt;16)+5];

int m,n;

int max(int x,int y)

{

return x&gt;y?x:y;

}

//#define max((a),(b)) ((a)&gt;(b)?(a):(b)) 

int dfs(int x)

{

if(dp[x]==-1)

{

dp[x]=0;

int i;

for(i=x;i!=0;i=(i-1)&amp;x)

{

if(used[i])

dp[x]=max(dp[x],dfs(x^i)+1);

}

}

return dp[x];

}

int main()

{

     int i,j,k,tmp;

     while(scanf("%d%d",&amp;n,&amp;m)==2)

{

memset(dp,-1,sizeof(dp));

memset(used,0,sizeof(used));

for(i=0;i&lt;m;i++)

{

scanf("%d",&amp;k);

{

   j=0;

while(k--)

{

 scanf("%d",&amp;tmp);

 j+=(1&lt;&lt;(tmp-1));

}

used[j]=1;

}

}



  printf("%d/n",dfs((1&lt;&lt;n)-1));

}

return 0;

}

 


   


   


   #include&lt;iostream&gt;

#include&lt;queue&gt;

#include&lt;algorithm&gt;

using namespace std;

#define maxn 205

#define inf 99999999

int f[maxn][maxn],c[maxn][maxn],n,pre[maxn],s,t,m;

bool used[maxn];

bool bfs()      //bfs找增广路

{

    memset(pre,-1,sizeof(pre));

memset(used,0,sizeof(used));

queue&lt;int&gt;Q;

int x,y;

Q.push(s);

    while(!Q.empty())

{

x=Q.front(),Q.pop();

    for(int i=1;i&lt;=2*n+1;i++)

{

if(!used[i]&amp;&amp;c[x][i]&gt;f[x][i])

{

used[i]=1;

pre[i]=x;

Q.push(i);

if(i==t)

return true;

}

}

}

return false;

}

int max_flow()

{

    int i,ans=0,Min;

while(bfs())

{

 Min=inf;

for(i=t;i!=s;i=pre[i])

   if(Min&gt;c[pre[i]][i]-f[pre[i]][i])

Min=c[pre[i]][i]-f[pre[i]][i];

 ans+=Min;

for(i=t;i!=s;i=pre[i])

{

f[pre[i]][i]+=Min;

f[i][pre[i]]-=Min;

}

}

return ans;

}

int main()

{

int i,x,y,z,j,k;

while(scanf("%d%d",&amp;n,&amp;m)==2)

{

memset(c,0,sizeof(c));



//for(i=0;i&lt;=2*n+1;i++)

//     for(j=0;j&lt;=2*n+1;j++)

//     c[i][j]=inf;

memset(f,0,sizeof(f));

int a[20];

for(i=0;i&lt;m;i++)

{

scanf("%d",&amp;k);

for(j=1;j&lt;=k;j++)

{

scanf("%d",&amp;a[j]);



}

sort(a+1,a+k+1);

c[0][a[1]]=1;

c[a[1]][a[1]+n]=1;

c[a[k]+n][2*n+1]=1;

for(j=2;j&lt;=k;j++)

{

c[a[j-1]+n][a[j]]=1;

c[a[j]][a[j]+n]=1;

}



}



s=0,t=2*n+1;

printf("%d/n",max_flow());

}

return 0;

}
 


   


   #include &lt;iostream&gt;
using namespace std;

bool mark[17];
struct node
{
	int count;
	int need[17];
};
node a[50001];
node b[50001];
int top;
bool use[50001];
bool check[17];

int m,n,ans;

int cmp(const void *a,const void *b)
{
	struct node *aa=(node *)a;
	struct node *bb=(node *)b;
	return (aa-&gt;count)-(bb-&gt;count);
}

void dfs(int x,int sum,int left)
{
	int i,flag;
	if(left==0||x&gt;top)
	{
		if(sum&gt;ans)
			ans=sum;

		return;
	}

	if(b[x].count&gt;left)
	{
		if(sum&gt;ans)
			ans=sum;

		return;
	}
	if(ans==n)
		return;

	flag=1;
	for(i=1;i&lt;=b[x].count;i++)
		if(mark[b[x].need[i]])
		{
			flag=0;
			break;
		}
		if(flag)
		{
			for(i=1;i&lt;=b[x].count;i++)
				mark[b[x].need[i]]=true;
			dfs(x+1,sum+1,left-b[x].count);
			for(i=1;i&lt;=b[x].count;i++)
				mark[b[x].need[i]]=false;
		}
		dfs(x+1,sum,left);
}

int main()
{
	//freopen("debug//in.txt","r",stdin);
	int i,j,k;
	while(cin&gt;&gt;n&gt;&gt;m)
	{
		memset(mark,0,sizeof(mark));
		memset(use,0,sizeof(use));

		for(i=1;i&lt;=m;i++)
		{
			cin&gt;&gt;a[i].count;
			for(j=1;j&lt;=a[i].count;j++)
				scanf("%d",&amp;a[i].need[j]);
		}
		qsort(a+1,m,sizeof(a[1]),cmp);

		for(i=1;i&lt;=m;i++)
		{
			if(use[i])
				continue;
			for(j=i+1;j&lt;=m;j++)
			{
				if(use[j])
					continue;
				memset(check,0,sizeof(check));
				for(k=1;k&lt;=a[i].count;k++)
					check[a[i].need[k]]=true;
				for(k=1;k&lt;=a[j].count;k++)
					check[a[j].need[k]]=false;
				for(k=1;k&lt;=a[i].count;k++)
					if(check[a[i].need[k]])
						break;
				if(k&gt;a[i].count)
					use[j]=true;
			}
		}
		top=0;
		for(i=1;i&lt;=m;i++)
			if(!use[i])
				b[++top]=a[i];


		ans=0;
		dfs(1,0,n);
		cout&lt;&lt;ans&lt;&lt;endl;
	}

	return 0;
}