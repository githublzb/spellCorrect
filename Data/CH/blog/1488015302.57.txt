spring+mybatis+druid数据源+sharding-jdbc分库分表首先我们看下如何让spring与mybatis集成，我使用的是mysql数据库，建库建表语句如下：


   drop database if exists demodb00;
CREATE database demodb00 DEFAULT CHARACTER SET utf8;

CREATE TABLE demodb00.user (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(100) DEFAULT NULL,
  age int(11) DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY id_UNIQUE (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

   


   



编写实体类UserEntity.java
   package net.aty.spring.entity;


public class UserEntity {

    private int id;

    private String name;

    private int age;

    public UserEntity() {

    }

    public UserEntity(int id, String name, int age) {
 this.id = id;
 this.name = name;
 this.age = age;
    }

    public int getAge() {
 return age;
    }

    public void setAge(int age) {
 this.age = age;
    }

    public String getName() {

 return name;
    }

    public void setName(String name) {
 this.name = name;
    }


    public int getId() {
 return id;
    }

    public void setId(int id) {
 this.id = id;
    }

    @Override
    public String toString() {
 return &quot;UserEntity{&quot; +
  &quot;id=&quot; + id +
  &quot;, name='&quot; + name + '\'' +
  &quot;, age=&quot; + age +
  '}';
    }
}


   


   



编写mapper类UserMapper.java
   package net.aty.spring.mapper;


import net.aty.spring.entity.UserEntity;

public interface UserMapper {

    int insertOne(UserEntity user);

    UserEntity selectByPk(int id);
}

   


   



编写mapper映射文件：UserMapper.xml
   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;

&lt;mapper namespace=&quot;net.aty.spring.mapper.UserMapper&quot;&gt;

    &lt;insert id=&quot;insertOne&quot; parameterType=&quot;net.aty.spring.entity.UserEntity&quot;&gt;
 INSERT INTO user(id, name,age) VALUE(#{id},#{name},#{age})
    &lt;/insert&gt;

    &lt;select id=&quot;selectByPk&quot; resultType=&quot;net.aty.spring.entity.UserEntity&quot; parameterType=&quot;java.lang.Integer&quot;&gt;
 select * from user where id=#{id}
    &lt;/select&gt;

&lt;/mapper&gt;

   




   



编写mybatis配置文件：mybatis.xml
   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
 &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!-- 配置mybatis的缓存，延迟加载等等一系列属性 --&gt;
    &lt;settings&gt;
 &lt;!-- 全局映射器启用缓存 --&gt;
 &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
 &lt;!-- 查询时，关闭关联对象即时加载以提高性能 --&gt;
 &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;false&quot;/&gt;
 &lt;!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 --&gt;
 &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;
 &lt;!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 --&gt;
 &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;
 &lt;!-- 允许使用列标签代替列名 --&gt;
 &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;
 &lt;!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 --&gt;
 &lt;!-- &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt; --&gt;
 &lt;!-- 给予被嵌套的resultMap以字段-属性的映射支持 --&gt;
 &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;FULL&quot;/&gt;
 &lt;!-- 对于批量更新操作缓存SQL以提高性能 --&gt;
 &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;REUSE&quot;/&gt;
 &lt;!-- 数据库超过25000秒仍未响应则超时 --&gt;
 &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25000&quot;/&gt;

    &lt;/settings&gt;

&lt;/configuration&gt;  

   


   



配置druid数据源，以及整合mybatis的spring-mybatis.xml
   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

	&lt;!--配置数据源--&gt;
    &lt;bean id=&quot;dataSourceResource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;
   destroy-method=&quot;close&quot;&gt;
 &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
 &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/demodb00&quot;/&gt;
 &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;maxActive&quot; value=&quot;10&quot;/&gt;
 &lt;property name=&quot;initialSize&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;
 &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 'x'&quot;/&gt;
 &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;50&quot;/&gt;
 &lt;property name=&quot;maxOpenPreparedStatements&quot; value=&quot;100&quot;/&gt;
 &lt;property name=&quot;proxyFilters&quot;&gt;
     &lt;list&gt;
  &lt;ref bean=&quot;statFilter&quot;/&gt;
  &lt;ref bean=&quot;logFilter&quot;/&gt;
     &lt;/list&gt;
 &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;statFilter&quot; class=&quot;com.alibaba.druid.filter.logging.Slf4jLogFilter&quot;&gt;
 &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;false&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;logFilter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;
 &lt;property name=&quot;slowSqlMillis&quot; value=&quot;50&quot;/&gt;
 &lt;property name=&quot;logSlowSql&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;mergeSql&quot; value=&quot;true&quot;/&gt;
    &lt;/bean&gt;



	&lt;!--整合spring与mybatis--&gt;

    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
 &lt;property name=&quot;dataSource&quot; ref=&quot;dataSourceResource&quot;/&gt;
 &lt;property name=&quot;configLocation&quot; value=&quot;classpath:/META-INF/mybatis.xml&quot;&gt;&lt;/property&gt;
 &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;net.aty.spring.mybatis.entity&quot;&gt;&lt;/property&gt;
 &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/META-INF/mybatis/*.xml&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
 &lt;property name=&quot;basePackage&quot; value=&quot;net.aty.spring.mapper&quot;&gt;&lt;/property&gt;
 &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;

   


   



编写测试代码，可以发现能够正常读取和修改数据库记录


   package net.aty.spring;

import net.aty.spring.entity.UserEntity;
import net.aty.spring.mapper.UserMapper;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
    public static void main(String[] args) {
 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;META-INF/spring-mybatis.xml&quot;);

 UserMapper mapper = context.getBean(UserMapper.class);
 mapper.insertOne(new UserEntity(1, &quot;xx&quot;, 11));
 mapper.insertOne(new UserEntity(2, &quot;xxzzz&quot;, 11));

 System.out.println(mapper.selectByPk(1));
 System.out.println(mapper.selectByPk(2));
    }
}




   



上面我们完成了spring与mybatis的整合，随着业务的变化，数据越来越多，我们需要分库分表。我们项目使用的当当中间件：sharding-jdbc，github地址是：https://github.com/dangdangdotcom/sharding-jdbc。假设我们分为demodb00和demodb01这2个数据库，每个库分user_0和user_1这2张表。


   sharding-jdbc.xml配置如下：


   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:rdb=&quot;http://www.dangdang.com/schema/ddframe/rdb&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.dangdang.com/schema/ddframe/rdb
   http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd&quot;&gt;

    &lt;bean id=&quot;statFilter&quot; class=&quot;com.alibaba.druid.filter.logging.Slf4jLogFilter&quot;&gt;
 &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;false&quot;/&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;logFilter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;
 &lt;property name=&quot;slowSqlMillis&quot; value=&quot;50&quot;/&gt;
 &lt;property name=&quot;logSlowSql&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;mergeSql&quot; value=&quot;true&quot;/&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;master0&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;
   destroy-method=&quot;close&quot;&gt;
 &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
 &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/demodb00&quot;/&gt;
 &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;maxActive&quot; value=&quot;10&quot;/&gt;
 &lt;property name=&quot;initialSize&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;
 &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 'x'&quot;/&gt;
 &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;50&quot;/&gt;
 &lt;property name=&quot;maxOpenPreparedStatements&quot; value=&quot;100&quot;/&gt;
 &lt;property name=&quot;proxyFilters&quot;&gt;
     &lt;list&gt;
  &lt;ref bean=&quot;statFilter&quot;/&gt;
  &lt;ref bean=&quot;logFilter&quot;/&gt;
     &lt;/list&gt;
 &lt;/property&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;master1&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;
   destroy-method=&quot;close&quot;&gt;
 &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
 &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/demodb01&quot;/&gt;
 &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
 &lt;property name=&quot;maxActive&quot; value=&quot;10&quot;/&gt;
 &lt;property name=&quot;initialSize&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt;
 &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;
 &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;
 &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 'x'&quot;/&gt;
 &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;
 &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;
 &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;50&quot;/&gt;
 &lt;property name=&quot;maxOpenPreparedStatements&quot; value=&quot;100&quot;/&gt;
 &lt;property name=&quot;proxyFilters&quot;&gt;
     &lt;list&gt;
  &lt;ref bean=&quot;statFilter&quot;/&gt;
  &lt;ref bean=&quot;logFilter&quot;/&gt;
     &lt;/list&gt;
 &lt;/property&gt;
    &lt;/bean&gt;

    &lt;rdb:master-slave-data-source id=&quot;rbb_0&quot; master-data-source-ref=&quot;master0&quot; slave-data-sources-ref=&quot;master0&quot;/&gt;
    &lt;rdb:master-slave-data-source id=&quot;rbb_1&quot; master-data-source-ref=&quot;master1&quot; slave-data-sources-ref=&quot;master1&quot;/&gt;

    &lt;rdb:strategy id=&quot;idDbSharding&quot; sharding-columns=&quot;id&quot;
    algorithm-class=&quot;net.aty.spring.DbAlgorithm&quot;/&gt;

    &lt;rdb:strategy id=&quot;idTbSharding&quot; sharding-columns=&quot;id&quot;
    algorithm-class=&quot;net.aty.spring.TbAlgorithm&quot;/&gt;

    &lt;rdb:data-source id=&quot;wholeDataSource&quot;&gt;
 &lt;rdb:sharding-rule data-sources=&quot;rbb_0,rbb_1&quot;&gt;
     &lt;rdb:table-rules&gt;
  &lt;rdb:table-rule logic-table=&quot;user&quot; actual-tables=&quot;user_${0..1}&quot;
    database-strategy=&quot;idDbSharding&quot; table-strategy=&quot;idTbSharding&quot;/&gt;
     &lt;/rdb:table-rules&gt;
 &lt;/rdb:sharding-rule&gt;
    &lt;/rdb:data-source&gt;

&lt;/beans&gt;


这个文件中定义了2个库的数据源，以及我们的分库分表规则，我是按照id分库分表的：
   import com.dangdang.ddframe.rdb.sharding.api.ShardingValue;
import com.dangdang.ddframe.rdb.sharding.api.strategy.database.SingleKeyDatabaseShardingAlgorithm;

import java.util.Collection;

public class DbAlgorithm implements SingleKeyDatabaseShardingAlgorithm&lt;Integer&gt; {

    @Override
    public String doEqualSharding(Collection&lt;String&gt; collection, ShardingValue&lt;Integer&gt; shardingValue) {
 int id = shardingValue.getValue();

 int index = id % 2;

 for (String each : collection) {
     if (each.endsWith(index + &quot;&quot;)) {
  return each;
     }
 }
 throw new UnsupportedOperationException();
    }

    @Override
    public Collection&lt;String&gt; doInSharding(Collection&lt;String&gt; collection, ShardingValue&lt;Integer&gt; shardingValue) {
 return null;
    }

    @Override
    public Collection&lt;String&gt; doBetweenSharding(Collection&lt;String&gt; collection, ShardingValue&lt;Integer&gt; shardingValue) {
 return null;
    }
}
   import com.dangdang.ddframe.rdb.sharding.api.ShardingValue;
import com.dangdang.ddframe.rdb.sharding.api.strategy.table.SingleKeyTableShardingAlgorithm;

import java.util.Collection;

public class TbAlgorithm implements SingleKeyTableShardingAlgorithm&lt;Integer&gt; {


    @Override
    public String doEqualSharding(Collection&lt;String&gt; availableTargetNames, ShardingValue&lt;Integer&gt; shardingValue) {
 int id = shardingValue.getValue();

 int index = id % 2;

 for (String each : availableTargetNames) {
     if (each.endsWith(index + &quot;&quot;)) {
  return each;
     }
 }
 throw new UnsupportedOperationException();
    }

    @Override
    public Collection&lt;String&gt; doInSharding(Collection&lt;String&gt; availableTargetNames, ShardingValue&lt;Integer&gt; shardingValue) {
 return null;
    }

    @Override
    public Collection&lt;String&gt; doBetweenSharding(Collection&lt;String&gt; availableTargetNames, ShardingValue&lt;Integer&gt; shardingValue) {
 return null;
    }
}


   


   



接下来我们只需要修改上面的spring-mybatis.xml，就可以使用分库分表了，不需要改动已有的代码。可以看到只需要修改数据源，就可以完成sharding-jdbc与mybatis、spring的集成，非常方便。






   修改了这个数据源后，直接运行上面的测试代码，可以看到分库分表生效了。id=1的记录插入了rbb_1这个数据源，user_1这张表；id=2的记录插入了rbb_0这个数据源，user_0这张表。


   






   




   




   




   




   




   




   至此就完成了spring与mybatis以及sharding-jdbc分库分表的集成，最后给出项目使用的pom配置：


   &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;net.aty.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-demo&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;mybatis-demo&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;

    &lt;properties&gt;
 &lt;spring.version&gt;4.3.3.RELEASE&lt;/spring.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
     &lt;version&gt;1.7.21&lt;/version&gt;
 &lt;/dependency&gt;

 &lt;dependency&gt;
     &lt;groupId&gt;log4j&lt;/groupId&gt;
     &lt;artifactId&gt;log4j&lt;/artifactId&gt;
     &lt;version&gt;1.2.17&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
     &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
     &lt;version&gt;3.4.1&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;mysql&lt;/groupId&gt;
     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
     &lt;version&gt;5.1.26&lt;/version&gt;
 &lt;/dependency&gt;

 &lt;dependency&gt;
     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
     &lt;artifactId&gt;druid&lt;/artifactId&gt;
     &lt;version&gt;1.0.26&lt;/version&gt;
 &lt;/dependency&gt;


 &lt;dependency&gt;
     &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
     &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
     &lt;version&gt;1.3.0&lt;/version&gt;
 &lt;/dependency&gt;


 &lt;dependency&gt;
     &lt;groupId&gt;com.dangdang&lt;/groupId&gt;
     &lt;artifactId&gt;sharding-jdbc-core&lt;/artifactId&gt;
     &lt;version&gt;1.3.3&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;com.dangdang&lt;/groupId&gt;
     &lt;artifactId&gt;sharding-jdbc-config-spring&lt;/artifactId&gt;
     &lt;version&gt;1.3.3&lt;/version&gt;
 &lt;/dependency&gt;


 &lt;dependency&gt;
     &lt;groupId&gt;org.springframework&lt;/groupId&gt;
     &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
     &lt;version&gt;${spring.version}&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
     &lt;groupId&gt;org.springframework&lt;/groupId&gt;
     &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
     &lt;version&gt;${spring.version}&lt;/version&gt;
 &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
 &lt;plugins&gt;
     &lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
  &lt;version&gt;2.5.1&lt;/version&gt;
  &lt;configuration&gt;
      &lt;encoding&gt;UTF-8&lt;/encoding&gt;
      &lt;source&gt;1.8&lt;/source&gt;
      &lt;target&gt;1.8&lt;/target&gt;
  &lt;/configuration&gt;
     &lt;/plugin&gt;
 &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;